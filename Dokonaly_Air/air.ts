// import login from "../Dokonaly_Air_Pom/login"

import { test ,expect} from "../Doko_air_pom_fixture/Pom_fixture"
import * as data from "../Doko_Data/Data.json"
const date_1 = new Date()
let date = date_1.getDate()
let month = date_1.getMonth() + 1
let year = date_1.getFullYear()
const currentdate = `${date}/${month}/${year}`// this current date won't work in weekends and for origin holidays that time we want to use the predefined dates only
//console.log(currentdate) // put this code in console to check current date

test.describe("Dokonaly registration : ", async () => {
    // test("",async({page,baseURL})=>{
    //     await page.goto(`${baseURL}register`)
    test("check validation message for all fieldboxes", async ({ baseURL, page, registerPage }) => {
        await page.goto(`${baseURL}register`)
        await registerPage.submit()
        await registerPage.firstNameval()
        await registerPage.lastNameval()
        await registerPage.Designationval()
        await registerPage.cmpNameval()
        await registerPage.emailNameval()
        await registerPage.contactNoval()
        await registerPage.iecodeval()
        await registerPage.panval()
        await registerPage.passval()
        await registerPage.cpassval()
        await registerPage.termsval()
    })

    test("Check Toast message for file upload", async ({ baseURL, page, registerPage }) => {
        await page.goto(`${baseURL}register`)
        await registerPage.firstName(data.fname)
        await registerPage.lastName(data.lname)
        await registerPage.designation(data.design)

        await registerPage.companyName(data.comp)
        await registerPage.emailId(data.mailup)
        await registerPage.phoneNo(data.phone)
        await registerPage.ieCode(data.ie)
        await registerPage.panCard(data.pan)
        await registerPage.password(data.pass)
        await registerPage.cPassword(data.pass)
        await registerPage.termsAndCondition()
        await registerPage.submit()

        await registerPage.ieuplval()
        await registerPage.ieUpload(data.ieUpl)
        await registerPage.fileuplval()
        await registerPage.submit()
        await registerPage.panuplval()
        await page.waitForTimeout(4000)

        await registerPage.panUpload(data.panUpl)
        await registerPage.fileuplval()
        await registerPage.delone()
        await registerPage.fileremval()

        await page.waitForTimeout(4000)
        await registerPage.deltwo()
        await registerPage.fileremval()

        await registerPage.ieUpload(data.ieUpl)
        await registerPage.panUpload(data.ieUpl)
        await registerPage.diffuplval()
        await page.waitForTimeout(4000)
        await registerPage.delone()

        await registerPage.panUpload(data.ieUpl)
        await registerPage.ieUpload(data.ieUpl)
        await registerPage.diffuplval()
        await page.waitForTimeout(4000)
        await registerPage.deltwo()

        await registerPage.ieUpload(data.xlsupl)
        await registerPage.uplpdfval()
        await page.waitForTimeout(4000)
        await registerPage.panUpload(data.xlsupl)
        await registerPage.uplpdfval()
        await page.waitForTimeout(2000)
    })

    test("Check Toast message for 3MB file upload", async ({ baseURL, page, registerPage }) => {
        await page.goto(`${baseURL}register`)
        await registerPage.firstName(data.fname)
        await registerPage.lastName(data.lname)
        await registerPage.designation(data.design)

        await registerPage.companyName(data.comp)
        await registerPage.emailId(data.mailup)
        await registerPage.phoneNo(data.phone)
        await registerPage.ieCode(data.ie)
        await registerPage.panCard(data.pan)
        await registerPage.password(data.pass)
        await registerPage.cPassword(data.pass)
        await registerPage.termsAndCondition()

        await registerPage.ieUpload(data.mbfile)
        await registerPage.threeuplval()
        await page.waitForTimeout(4000)
        await registerPage.panUpload(data.mbfile)
        await registerPage.threeuplval()

    })

    test("Check validation message for Non-accepting characters like space", async ({ baseURL, page, registerPage }) => {
        await page.goto(`${baseURL}register`)
        await registerPage.submit()
        await registerPage.firstName(data.space_data)
        await registerPage.firstNameval()
        await registerPage.lastName(data.space_data)
        await registerPage.lastNameval()
        await registerPage.designation(data.space_data)
        await registerPage.Designationval()
        await registerPage.companyName(data.space_data)
        await registerPage.cmpNameval()
        await registerPage.phoneNo(data.space_data)
        await registerPage.contactNoval()
        await registerPage.ieCode(data.space_data)
        await registerPage.iecodeval()
        await registerPage.panCard(data.space_data)
        await registerPage.panval
        await registerPage.password(data.space_data)
        await registerPage.passval()
        await registerPage.cPassword(data.space_data)
        await registerPage.cpassval()
        await registerPage.termsval()


    })

    test("Check validation message for Non-accepting characters like special characters and numbers", async ({ baseURL, page, registerPage }) => {
        await page.goto(`${baseURL}register`)
        await registerPage.submit()
        await registerPage.firstName(data.splcharacter_data)
        await registerPage.alphabets_allowed()
        await registerPage.firstName(data.numeric_data)
        await registerPage.alphabets_allowed()
        await registerPage.firstName(data.fname)

        await registerPage.lastName(data.splcharacter_data)
        await registerPage.alphabets_allowed()
        await registerPage.lastName(data.numeric_data)
        await registerPage.alphabets_allowed()
        await registerPage.lastName(data.lname)

        await registerPage.designation(data.splcharacter_data)
        await registerPage.alphabets_allowed()
        await registerPage.designation(data.numeric_data)
        await registerPage.alphabets_allowed()
        await registerPage.designation(data.design)

        await registerPage.companyName(data.splcharacter_data)
        await registerPage.all_allowed()
        await registerPage.companyName(data.numeric_data)
        await registerPage.all_allowed()
        await registerPage.companyName(data.comp)

        await registerPage.emailId(data.splcharacter_data)
        await registerPage.valid_mail()
        await registerPage.emailId(data.numeric_data)
        await registerPage.valid_mail()
        await registerPage.emailId(data.mail)

        await registerPage.phoneNo(data.splcharacter_data)
        await registerPage.valid_phone()
        await registerPage.designation(data.numeric_data)
        await registerPage.valid_phone()
        await registerPage.phoneNo(data.phone)

        await registerPage.ieCode(data.splcharacter_data)
        await registerPage.valid_IE()
        await registerPage.designation(data.numeric_data)
        await registerPage.valid_IE()
        await registerPage.ieCode(data.ie)

        await registerPage.panCard(data.splcharacter_data)
        await registerPage.valid_PAN()
        await registerPage.designation(data.numeric_data)
        await registerPage.valid_PAN()
        await registerPage.panCard(data.pan)
        await registerPage.termsval()

        await registerPage.ieCode(data.alr_ie)
        await registerPage.ie_already_used()

        await registerPage.emailId(data.alr_mail)
        await registerPage.mail_already_used()


    })

    test("register with valid details", async ({ page, baseURL, registerPage }) => {
        await page.goto(`${baseURL}login/`)
        await registerPage.newRegister()
        await registerPage.kyc()
        await registerPage.firstName(data.fname)
        await registerPage.lastName(data.lname)
        await registerPage.designation(data.design)
        await registerPage.companyName(data.comp)
        await registerPage.emailId(data.mail)
        await registerPage.phoneNo(data.phone)
        await registerPage.ieCode(data.ie)
        await registerPage.panCard(data.pan)
        await registerPage.password(data.pass)
        await registerPage.cPassword(data.pass)

        await registerPage.ieUpload(data.ieUpl)
        await registerPage.panUpload(data.panUpl)
        await registerPage.termsAndCondition()
        await registerPage.submit()
        await registerPage.register_success()
        await page.waitForTimeout(3000)
    })

})

test.describe("Dokonaly Login", async () => {
    test.beforeEach(async ({ page, baseURL }) => {
        await page.goto(`${baseURL}login/`)
    })
    test("check validation msg", async ({ loginpage }) => {

        await loginpage.loginbtn()
        await loginpage.emailval()
        await loginpage.passval()

    })
    test("login with space", async ({ loginpage }) => {

        await loginpage.username(data.space_data)
        await loginpage.password(data.space_data)
        await loginpage.loginbtn()
        await loginpage.emailval()
        await loginpage.passval()

    })
    test("login with numeric and special characters", async ({ loginpage }) => {

        await loginpage.username(data.numeric_data)
        await loginpage.password(data.numeric_data)
        await loginpage.loginbtn()
        await loginpage.validemailval()
        await loginpage.username(data.splcharacter_data)
        await loginpage.password(data.splcharacter_data)
        await loginpage.loginbtn()
        await loginpage.validemailval()

    })
    test("login with Invalid username", async ({ page, loginpage }) => {
        // await page.goto(`${baseURL}login/`)
        await loginpage.username(data.Inuname)
        await loginpage.password(data.passw)
        await loginpage.loginbtn()
        await loginpage.wrtoast()
        await page.close()
    })
    test("login with Invalid password", async ({ loginpage }) => {
        // await page.goto(`${baseURL}login/`)
        await loginpage.username(data.uname)
        await loginpage.password(data.Inpassw)
        await loginpage.loginbtn()
        await loginpage.wrtoast()
    })
    test("login with Invalid username and password", async ({ loginpage }) => {
        // await page.goto(`${baseURL}login/`)
        await loginpage.username(data.Inuname)
        await loginpage.password(data.Inpassw)
        await loginpage.loginbtn()
        await loginpage.wrtoast()
    })
    test.only("login with valid username", async ({ loginpage }) => {

        await loginpage.username(data.uname)
        await loginpage.password(data.passw)
        await loginpage.loginbtn()
        await loginpage.toast()
        await loginpage.logout()
        await loginpage.logout_toast()
    })

})

test.describe("Module Wise Testing On Dokonaly Air: ", async () => {

    test("Routing with multiple scenarios: ", async ({ baseURL, page, loginpage, bookingpage }) => {
        await page.goto(`${baseURL}book`)//add all origin port and respective details
        await loginpage.username(data.uname)
        await loginpage.password(data.passw)
        await loginpage.loginbtn()
        await loginpage.toast()
        await bookingpage.newbook()
        await bookingpage.air()
        await bookingpage.nxt()

        await bookingpage.orival()
        await bookingpage.desval()
        await bookingpage.dateval()
        await bookingpage.incoval()
        await bookingpage.origin(data.ori_sin)
        await bookingpage.incoterm_exw()
        await bookingpage.nxt()
        await bookingpage.zipval()
        await bookingpage.placeval()

        //   await page.reload()

        await bookingpage.origin(data.ori_hk)
        await bookingpage.incoterm_exw()
        await bookingpage.nxt()
        await bookingpage.desval()
        await bookingpage.dateval()
        await bookingpage.placeval()

        // await page.reload()

        await bookingpage.origin(data.ori_sin)
        await bookingpage.incoterm_fca()
        await bookingpage.nxt()
        await bookingpage.desval()
        await bookingpage.dateval()
        await bookingpage.nozipval()
        await bookingpage.noplaceval()

        //await page.reload()

        await bookingpage.origin(data.ori_hk)
        await bookingpage.incoterm_fob()
        await bookingpage.nxt()
        await bookingpage.desval()
        await bookingpage.dateval()
        await bookingpage.nozipval()
        await bookingpage.noplaceval()

        await bookingpage.origin(data.ori_sin)
        await bookingpage.destination(data.dest)
        await bookingpage.date(currentdate)
        await bookingpage.incoterm_exw()
        await bookingpage.zipcode(data.exw_zip)
        await bookingpage.place(data.exw_place)
        await bookingpage.nxt()


    })

    test.describe("Cargo Dimension with multiple scenarios: ", async () => {//height validation also need to add

        test.beforeEach(async ({ page, baseURL, loginpage, bookingpage }) => {
            await page.goto(`${baseURL}login/`)
            await loginpage.username(data.uname)
            await loginpage.password(data.passw)
            await loginpage.loginbtn()
            await loginpage.toast()
            await bookingpage.newbook()
            await bookingpage.air()
            await bookingpage.origin(data.ori_sin)
            await bookingpage.destination(data.dest)
            await bookingpage.date(currentdate)
            await bookingpage.incoterm_exw()
            await bookingpage.zipcode(data.exw_zip)
            await bookingpage.place(data.exw_place)
            await bookingpage.nxt()
            await page.waitForTimeout(500)
        })
        test("check validation message and other components", async ({ page, bookingpage }) => {//enter non acceptable characters and check validation msg & edit and revalidate option

            await bookingpage.show_quotes()
            await bookingpage.typeval()
            await bookingpage.metval()
            await bookingpage.lenval()
            await bookingpage.widval()
            await bookingpage.heival()
            await bookingpage.No_of_val()
            await bookingpage.Weight_per_val()
            await bookingpage.comval()
            await bookingpage.hsnval()
            await bookingpage.hsn_desc_val()
            await bookingpage.note_msg()

            await bookingpage.type(data.type_bar)
            await bookingpage.show_quotes()
            await bookingpage.metval()
            await bookingpage.nolenval()
            await bookingpage.nowidval()
            await bookingpage.radval()
            await bookingpage.heival()
            await bookingpage.No_of_val()
            await bookingpage.Weight_per_val()
            await bookingpage.comval()
            await bookingpage.hsnval()
            await bookingpage.hsn_desc_val()
            await bookingpage.note_msg()

            await bookingpage.addbutton()
            await bookingpage.addbutton()
            await bookingpage.addbutton()
            await bookingpage.show_quotes()
            await bookingpage.removebutton_t()
            await bookingpage.removebutton_s()
            await bookingpage.removebutton_f()

            await bookingpage.type(data.type)
            await bookingpage.metric(data.met)
            await bookingpage.len(data.splcharacter_data)
            await bookingpage.wid(data.splcharacter_data)
            await bookingpage.height(data.splcharacter_data)
            await bookingpage.no_of_pack(data.splcharacter_data)
            await bookingpage.weight_per(data.splcharacter_data)

            await bookingpage.spl_l_num_not_allowed()
            await bookingpage.spl_w_num_not_allowed()
            await bookingpage.spl_h_num_not_allowed()
            await bookingpage.spl_n_num_not_allowed()
            await bookingpage.spl_wei_num_not_allowed()

            await bookingpage.len(data.alphabets_data)
            await bookingpage.wid(data.alphabets_data)
            await bookingpage.height(data.alphabets_data)
            await bookingpage.no_of_pack(data.alphabets_data)
            await bookingpage.weight_per(data.alphabets_data)

            await bookingpage.spl_l_num_not_allowed()
            await bookingpage.spl_w_num_not_allowed()
            await bookingpage.spl_h_num_not_allowed()
            await bookingpage.spl_n_num_not_allowed()
            await bookingpage.spl_wei_num_not_allowed()

            await bookingpage.len(data.zero_data)
            await bookingpage.wid(data.zero_data)
            await bookingpage.height(data.zero_data)
            await bookingpage.no_of_pack(data.zero_data)
            await bookingpage.weight_per(data.zero_data)
            await bookingpage.commodity(data.zero_data)

            await bookingpage.num_l_not_allowed()
            await bookingpage.num_w_not_allowed()
            await bookingpage.num_h_not_allowed()
            await bookingpage.num_no_not_allowed()
            await bookingpage.num_wei_not_allowed()
            await bookingpage.num_com_not_allowed()
            await bookingpage.commodity(data.numeric_data)
            await bookingpage.num_com_not_allowed()

            await bookingpage.len(data.space_data)
            await bookingpage.wid(data.space_data)
            await bookingpage.height(data.space_data)
            await bookingpage.no_of_pack(data.space_data)
            await bookingpage.weight_per(data.space_data)

            await bookingpage.spl_l_num_not_allowed()
            await bookingpage.spl_w_num_not_allowed()
            await bookingpage.spl_h_num_not_allowed()
            await bookingpage.spl_n_num_not_allowed()
            await bookingpage.spl_wei_num_not_allowed()

            await bookingpage.type(data.type_rol)
            await bookingpage.radius(data.splcharacter_data)
            await bookingpage.spl_l_num_not_allowed()
            await bookingpage.radius(data.alphabets_data)
            await bookingpage.spl_l_num_not_allowed()
            await bookingpage.radius(data.space_data)
            await bookingpage.spl_l_num_not_allowed()
            await bookingpage.radius(data.zero_data)
            await bookingpage.num_r_not_allowed()

            await bookingpage.type(data.type)
            await bookingpage.metric(data.met)
            await bookingpage.len(data.len)
            await bookingpage.wid(data.wid)
            await bookingpage.height(data.hei)
            await bookingpage.no_of_pack(data.no_of)
            await bookingpage.weight_per(data.weight_per)
            await bookingpage.commodity(data.commodity_lamps)
            await bookingpage.hsn_code(data.hsn_c_lamps)
            await page.keyboard.press('Enter')
            await bookingpage.hsn_code_rem()
            await bookingpage.hsnval()
            await bookingpage.hsn_desc_val()
            await bookingpage.note_msg()

            await bookingpage.type(data.type)
            await bookingpage.metric(data.met)
            await bookingpage.len(data.len)
            await bookingpage.wid(data.wid)
            await bookingpage.height(data.hei)
            await bookingpage.no_of_pack(data.no_of)
            await bookingpage.weight_per(data.weight_per)
            await bookingpage.commodity(data.commodity_lamps)
            await bookingpage.hsn_code(data.hsn_c_lamps)
            await page.keyboard.press('Enter')
            await bookingpage.commodity_rem()
            await bookingpage.show_quotes()
            await bookingpage.comval()
            await bookingpage.hsnval()
            await bookingpage.hsn_desc_val()
            await bookingpage.fortyfive_gross()
            await bookingpage.fortyfive_charge()
            await bookingpage.note_msg()


        })
        test("Calculation check for Pallet in CM", async ({ page, bookingpage }) => {
            await bookingpage.type(data.type)
            await bookingpage.metric(data.met)
            await bookingpage.len(data.len_1)
            await bookingpage.wid(data.wid_1)
            await bookingpage.height(data.bar_hei_1)
            await bookingpage.heival_sin()
            await bookingpage.height(data.bar_hei)
            await bookingpage.hei_no_val_sin()
            await bookingpage.height(data.hei_1)
            await bookingpage.no_of_pack(data.no_of)
            await bookingpage.weight_per(data.weight_per)
            await bookingpage.norm_gross()
            await bookingpage.sixtyseven_charge()
            await bookingpage.note_msg()

            await bookingpage.len(data.len)
            await bookingpage.wid(data.wid)
            await bookingpage.height(data.hei)
            await bookingpage.no_of_pack(data.no_of_2)
            await bookingpage.weight_per(data.weight_per_2)
            await bookingpage.fortyhundred_gross()
            await bookingpage.fortyhundred_charge()
            await bookingpage.note_msg()

            await bookingpage.len(data.len_1)
            await bookingpage.wid(data.wid_1)
            await bookingpage.height(data.hei_1)
            await bookingpage.no_of_pack(data.no_of_m)
            await bookingpage.weight_per(data.weight_per_m)
            await bookingpage.three001_charge()
            await bookingpage.three001_gross()
            await bookingpage.note_msg()
            await bookingpage.diabled_show_quotes()

            await bookingpage.len(data.len_m)
            await bookingpage.wid(data.wid_m)
            await bookingpage.height(data.hei_m)
            await bookingpage.no_of_pack(data.no_of)
            await bookingpage.weight_per(data.weight_per)
            await bookingpage.norm_gross()
            await bookingpage.six696_charge()
            await bookingpage.note_msg()
            await bookingpage.diabled_show_quotes()

            await bookingpage.type(data.type)
            await bookingpage.metric(data.met)
            await bookingpage.len(data.len)
            await bookingpage.wid(data.wid)
            await bookingpage.height(data.hei)
            await bookingpage.no_of_pack(data.no_of)
            await bookingpage.weight_per(data.weight_per)
            await bookingpage.commodity(data.commodity)
            await bookingpage.hsn_code(data.hsn_c)
            await page.keyboard.press('Enter')
            await bookingpage.note_msg()

        })
        test("Calculation check for Pallet in Inch", async ({ bookingpage }) => {
            await bookingpage.type(data.type)
            await bookingpage.metric(data.met_1)
            await bookingpage.len(data.bar_t)
            await bookingpage.wid(data.bar_t)
            await bookingpage.height(data.bar_s_2)
            await bookingpage.heival_sin()
            await bookingpage.height(data.bar_s_1)
            await bookingpage.hei_no_val_sin()
            await bookingpage.height(data.bar_s)
            await bookingpage.no_of_pack(data.bar_w)
            await bookingpage.weight_per(data.bar_w)
            await bookingpage.onefour()
            await bookingpage.twentyfour()

            await bookingpage.len(data.bar_t)
            await bookingpage.wid(data.bar_t)
            await bookingpage.height(data.bar_t)
            await bookingpage.no_of_pack(data.bar_w)
            await bookingpage.weight_per(data.bar_f)
            await bookingpage.thirtysix_gross()
            await bookingpage.thirtysix_charge()
        })
        test("Calculation check for Skids in CM", async ({ page, bookingpage }) => {
            await bookingpage.type(data.type_ski)
            await bookingpage.metric(data.met)
            await bookingpage.len(data.len_1)
            await bookingpage.wid(data.wid_1)
            await bookingpage.height(data.bar_hei_1)
            await bookingpage.heival_sin()
            await bookingpage.height(data.bar_hei)
            await bookingpage.hei_no_val_sin()
            await bookingpage.height(data.hei_1)
            await bookingpage.no_of_pack(data.no_of)
            await bookingpage.weight_per(data.weight_per)
            await bookingpage.norm_gross()
            await bookingpage.sixtyseven_charge()
            await bookingpage.note_msg()

            await bookingpage.len(data.len)
            await bookingpage.wid(data.wid)
            await bookingpage.height(data.hei)
            await bookingpage.no_of_pack(data.no_of_2)
            await bookingpage.weight_per(data.weight_per_2)
            await bookingpage.fortyhundred_gross()
            await bookingpage.fortyhundred_charge()
            await bookingpage.note_msg()

            await bookingpage.len(data.len_1)
            await bookingpage.wid(data.wid_1)
            await bookingpage.height(data.hei_1)
            await bookingpage.no_of_pack(data.no_of_m)
            await bookingpage.weight_per(data.weight_per_m)
            await bookingpage.three001_charge()
            await bookingpage.three001_gross()
            await bookingpage.note_msg()
            await bookingpage.diabled_show_quotes()

            await bookingpage.len(data.len_m)
            await bookingpage.wid(data.wid_m)
            await bookingpage.height(data.hei_m)
            await bookingpage.no_of_pack(data.no_of)
            await bookingpage.weight_per(data.weight_per)
            await bookingpage.norm_gross()
            await bookingpage.six696_charge()
            await bookingpage.note_msg()
            await bookingpage.diabled_show_quotes()

            await bookingpage.type(data.type)
            await bookingpage.metric(data.met)
            await bookingpage.len(data.len)
            await bookingpage.wid(data.wid)
            await bookingpage.height(data.hei)
            await bookingpage.no_of_pack(data.no_of)
            await bookingpage.weight_per(data.weight_per)
            await bookingpage.commodity(data.commodity)
            await bookingpage.hsn_code(data.hsn_c)
            await page.keyboard.press('Enter')
            await bookingpage.note_msg()

        })
        test("Calculation check for Skids in Inch", async ({ bookingpage }) => {
            await bookingpage.type(data.type_ski)
            await bookingpage.metric(data.met_1)
            await bookingpage.len(data.bar_t)
            await bookingpage.wid(data.bar_t)
            await bookingpage.height(data.bar_s_2)
            await bookingpage.heival_sin()
            await bookingpage.height(data.bar_s_1)
            await bookingpage.hei_no_val_sin()
            await bookingpage.height(data.bar_s)
            await bookingpage.no_of_pack(data.bar_w)
            await bookingpage.weight_per(data.bar_w)
            await bookingpage.onefour()
            await bookingpage.twentyfour()

            await bookingpage.len(data.bar_t)
            await bookingpage.wid(data.bar_t)
            await bookingpage.height(data.bar_t)
            await bookingpage.no_of_pack(data.bar_w)
            await bookingpage.weight_per(data.bar_f)
            await bookingpage.thirtysix_gross()
            await bookingpage.thirtysix_charge()
        })
        test("Calculation check for Crates in CM", async ({ page, bookingpage }) => {
            await bookingpage.type(data.type_cra)
            await bookingpage.metric(data.met)
            await bookingpage.len(data.len_1)
            await bookingpage.wid(data.wid_1)
            await bookingpage.height(data.bar_hei_1)
            await bookingpage.heival_sin()
            await bookingpage.height(data.bar_hei)
            await bookingpage.hei_no_val_sin()
            await bookingpage.height(data.hei_1)
            await bookingpage.no_of_pack(data.no_of)
            await bookingpage.weight_per(data.weight_per)
            await bookingpage.norm_gross()
            await bookingpage.sixtyseven_charge()
            await bookingpage.note_msg()

            await bookingpage.len(data.len)
            await bookingpage.wid(data.wid)
            await bookingpage.height(data.hei)
            await bookingpage.no_of_pack(data.no_of_2)
            await bookingpage.weight_per(data.weight_per_2)
            await bookingpage.fortyhundred_gross()
            await bookingpage.fortyhundred_charge()
            await bookingpage.note_msg()

            await bookingpage.len(data.len_1)
            await bookingpage.wid(data.wid_1)
            await bookingpage.height(data.hei_1)
            await bookingpage.no_of_pack(data.no_of_m)
            await bookingpage.weight_per(data.weight_per_m)
            await bookingpage.three001_charge()
            await bookingpage.three001_gross()
            await bookingpage.note_msg()
            await bookingpage.diabled_show_quotes()

            await bookingpage.len(data.len_m)
            await bookingpage.wid(data.wid_m)
            await bookingpage.height(data.hei_m)
            await bookingpage.no_of_pack(data.no_of)
            await bookingpage.weight_per(data.weight_per)
            await bookingpage.norm_gross()
            await bookingpage.six696_charge()
            await bookingpage.note_msg()
            await bookingpage.diabled_show_quotes()

            await bookingpage.type(data.type)
            await bookingpage.metric(data.met)
            await bookingpage.len(data.len)
            await bookingpage.wid(data.wid)
            await bookingpage.height(data.hei)
            await bookingpage.no_of_pack(data.no_of)
            await bookingpage.weight_per(data.weight_per)
            await bookingpage.commodity(data.commodity)
            await bookingpage.hsn_code(data.hsn_c)
            await page.keyboard.press('Enter')
            await bookingpage.note_msg()

        })
        test("Calculation check for Crates in Inch", async ({ bookingpage }) => {
            await bookingpage.type(data.type_cra)
            await bookingpage.metric(data.met_1)
            await bookingpage.len(data.bar_t)
            await bookingpage.wid(data.bar_t)
            await bookingpage.height(data.bar_s_2)
            await bookingpage.heival_sin()
            await bookingpage.height(data.bar_s_1)
            await bookingpage.hei_no_val_sin()
            await bookingpage.height(data.bar_s)
            await bookingpage.no_of_pack(data.bar_w)
            await bookingpage.weight_per(data.bar_w)
            await bookingpage.onefour()
            await bookingpage.twentyfour()

            await bookingpage.len(data.bar_t)
            await bookingpage.wid(data.bar_t)
            await bookingpage.height(data.bar_t)
            await bookingpage.no_of_pack(data.bar_w)
            await bookingpage.weight_per(data.bar_f)
            await bookingpage.thirtysix_gross()
            await bookingpage.thirtysix_charge()
        })
        test("Calculation check for Cartons in CM", async ({ page, bookingpage }) => {
            await bookingpage.type(data.type_car)
            await bookingpage.metric(data.met)
            await bookingpage.len(data.len_1)
            await bookingpage.wid(data.wid_1)
            await bookingpage.height(data.bar_hei_1)
            await bookingpage.heival_sin()
            await bookingpage.height(data.bar_hei)
            await bookingpage.hei_no_val_sin()
            await bookingpage.height(data.hei_1)
            await bookingpage.no_of_pack(data.no_of)
            await bookingpage.weight_per(data.weight_per)
            await bookingpage.norm_gross()
            await bookingpage.sixtyseven_charge()
            await bookingpage.note_msg()

            await bookingpage.len(data.len)
            await bookingpage.wid(data.wid)
            await bookingpage.height(data.hei)
            await bookingpage.no_of_pack(data.no_of_2)
            await bookingpage.weight_per(data.weight_per_2)
            await bookingpage.fortyhundred_gross()
            await bookingpage.fortyhundred_charge()
            await bookingpage.note_msg()

            await bookingpage.len(data.len_1)
            await bookingpage.wid(data.wid_1)
            await bookingpage.height(data.hei_1)
            await bookingpage.no_of_pack(data.no_of_m)
            await bookingpage.weight_per(data.weight_per_m)
            await bookingpage.three001_charge()
            await bookingpage.three001_gross()
            await bookingpage.note_msg()
            await bookingpage.diabled_show_quotes()

            await bookingpage.len(data.len_m)
            await bookingpage.wid(data.wid_m)
            await bookingpage.height(data.hei_m)
            await bookingpage.no_of_pack(data.no_of)
            await bookingpage.weight_per(data.weight_per)
            await bookingpage.norm_gross()
            await bookingpage.six696_charge()
            await bookingpage.note_msg()
            await bookingpage.diabled_show_quotes()

            await bookingpage.type(data.type)
            await bookingpage.metric(data.met)
            await bookingpage.len(data.len)
            await bookingpage.wid(data.wid)
            await bookingpage.height(data.hei)
            await bookingpage.no_of_pack(data.no_of)
            await bookingpage.weight_per(data.weight_per)
            await bookingpage.commodity(data.commodity)
            await bookingpage.hsn_code(data.hsn_c)
            await page.keyboard.press('Enter')
            await bookingpage.note_msg()

        })
        test("Calculation check for Cartons in Inch", async ({ bookingpage }) => {
            await bookingpage.type(data.type_car)
            await bookingpage.metric(data.met_1)
            await bookingpage.len(data.bar_t)
            await bookingpage.wid(data.bar_t)
            await bookingpage.height(data.bar_s_2)
            await bookingpage.heival_sin()
            await bookingpage.height(data.bar_s_1)
            await bookingpage.hei_no_val_sin()
            await bookingpage.height(data.bar_s)
            await bookingpage.no_of_pack(data.bar_w)
            await bookingpage.weight_per(data.bar_w)
            await bookingpage.onefour()
            await bookingpage.twentyfour()

            await bookingpage.len(data.bar_t)
            await bookingpage.wid(data.bar_t)
            await bookingpage.height(data.bar_t)
            await bookingpage.no_of_pack(data.bar_w)
            await bookingpage.weight_per(data.bar_f)
            await bookingpage.thirtysix_gross()
            await bookingpage.thirtysix_charge()
        })
        test("Calculation check for Bales in CM", async ({ page, bookingpage }) => {
            await bookingpage.type(data.type_bal)
            await bookingpage.metric(data.met)
            await bookingpage.len(data.len_1)
            await bookingpage.wid(data.wid_1)
            await bookingpage.height(data.bar_hei_1)
            await bookingpage.heival_sin()
            await bookingpage.height(data.bar_hei)
            await bookingpage.hei_no_val_sin()
            await bookingpage.height(data.hei_1)
            await bookingpage.no_of_pack(data.no_of)
            await bookingpage.weight_per(data.weight_per)
            await bookingpage.norm_gross()
            await bookingpage.sixtyseven_charge()
            await bookingpage.note_msg()

            await bookingpage.len(data.len)
            await bookingpage.wid(data.wid)
            await bookingpage.height(data.hei)
            await bookingpage.no_of_pack(data.no_of_2)
            await bookingpage.weight_per(data.weight_per_2)
            await bookingpage.fortyhundred_gross()
            await bookingpage.fortyhundred_charge()
            await bookingpage.note_msg()

            await bookingpage.len(data.len_1)
            await bookingpage.wid(data.wid_1)
            await bookingpage.height(data.hei_1)
            await bookingpage.no_of_pack(data.no_of_m)
            await bookingpage.weight_per(data.weight_per_m)
            await bookingpage.three001_charge()
            await bookingpage.three001_gross()
            await bookingpage.note_msg()
            await bookingpage.diabled_show_quotes()

            await bookingpage.len(data.len_m)
            await bookingpage.wid(data.wid_m)
            await bookingpage.height(data.hei_m)
            await bookingpage.no_of_pack(data.no_of)
            await bookingpage.weight_per(data.weight_per)
            await bookingpage.norm_gross()
            await bookingpage.six696_charge()
            await bookingpage.note_msg()
            await bookingpage.diabled_show_quotes()

            await bookingpage.type(data.type)
            await bookingpage.metric(data.met)
            await bookingpage.len(data.len)
            await bookingpage.wid(data.wid)
            await bookingpage.height(data.hei)
            await bookingpage.no_of_pack(data.no_of)
            await bookingpage.weight_per(data.weight_per)
            await bookingpage.commodity(data.commodity)
            await bookingpage.hsn_code(data.hsn_c)
            await page.keyboard.press('Enter')
            await bookingpage.note_msg()

        })
        test("Calculation check for Bales in Inch", async ({ bookingpage }) => {
            await bookingpage.type(data.type_bal)
            await bookingpage.metric(data.met_1)
            await bookingpage.len(data.bar_t)
            await bookingpage.wid(data.bar_t)
            await bookingpage.height(data.bar_s_2)
            await bookingpage.heival_sin()
            await bookingpage.height(data.bar_s_1)
            await bookingpage.hei_no_val_sin()
            await bookingpage.height(data.bar_s)
            await bookingpage.no_of_pack(data.bar_w)
            await bookingpage.weight_per(data.bar_w)
            await bookingpage.onefour()
            await bookingpage.twentyfour()

            await bookingpage.len(data.bar_t)
            await bookingpage.wid(data.bar_t)
            await bookingpage.height(data.bar_t)
            await bookingpage.no_of_pack(data.bar_w)
            await bookingpage.weight_per(data.bar_f)
            await bookingpage.thirtysix_gross()
            await bookingpage.thirtysix_charge()
        })
        test("Calculation check for Boxes in CM", async ({ page, bookingpage }) => {
            await bookingpage.type(data.type_box)
            await bookingpage.metric(data.met)
            await bookingpage.len(data.len_1)
            await bookingpage.wid(data.wid_1)
            await bookingpage.height(data.bar_hei_1)
            await bookingpage.heival_sin()
            await bookingpage.height(data.bar_hei)
            await bookingpage.hei_no_val_sin()
            await bookingpage.height(data.hei_1)
            await bookingpage.no_of_pack(data.no_of)
            await bookingpage.weight_per(data.weight_per)
            await bookingpage.norm_gross()
            await bookingpage.sixtyseven_charge()
            await bookingpage.note_msg()

            await bookingpage.len(data.len)
            await bookingpage.wid(data.wid)
            await bookingpage.height(data.hei)
            await bookingpage.no_of_pack(data.no_of_2)
            await bookingpage.weight_per(data.weight_per_2)
            await bookingpage.fortyhundred_gross()
            await bookingpage.fortyhundred_charge()
            await bookingpage.note_msg()

            await bookingpage.len(data.len_1)
            await bookingpage.wid(data.wid_1)
            await bookingpage.height(data.hei_1)
            await bookingpage.no_of_pack(data.no_of_m)
            await bookingpage.weight_per(data.weight_per_m)
            await bookingpage.three001_charge()
            await bookingpage.three001_gross()
            await bookingpage.note_msg()
            await bookingpage.diabled_show_quotes()

            await bookingpage.len(data.len_m)
            await bookingpage.wid(data.wid_m)
            await bookingpage.height(data.hei_m)
            await bookingpage.no_of_pack(data.no_of)
            await bookingpage.weight_per(data.weight_per)
            await bookingpage.norm_gross()
            await bookingpage.six696_charge()
            await bookingpage.note_msg()
            await bookingpage.diabled_show_quotes()

            await bookingpage.type(data.type)
            await bookingpage.metric(data.met)
            await bookingpage.len(data.len)
            await bookingpage.wid(data.wid)
            await bookingpage.height(data.hei)
            await bookingpage.no_of_pack(data.no_of)
            await bookingpage.weight_per(data.weight_per)
            await bookingpage.commodity(data.commodity)
            await bookingpage.hsn_code(data.hsn_c)
            await page.keyboard.press('Enter')
            await bookingpage.note_msg()

        })
        test("Calculation check for Boxes in Inch", async ({ bookingpage }) => {
            await bookingpage.type(data.type_box)
            await bookingpage.metric(data.met_1)
            await bookingpage.len(data.bar_t)
            await bookingpage.wid(data.bar_t)
            await bookingpage.height(data.bar_s_2)
            await bookingpage.heival_sin()
            await bookingpage.height(data.bar_s_1)
            await bookingpage.hei_no_val_sin()
            await bookingpage.height(data.bar_s)
            await bookingpage.no_of_pack(data.bar_w)
            await bookingpage.weight_per(data.bar_w)
            await bookingpage.onefour()
            await bookingpage.twentyfour()

            await bookingpage.len(data.bar_t)
            await bookingpage.wid(data.bar_t)
            await bookingpage.height(data.bar_t)
            await bookingpage.no_of_pack(data.bar_w)
            await bookingpage.weight_per(data.bar_f)
            await bookingpage.thirtysix_gross()
            await bookingpage.thirtysix_charge()
        })
        test("Calculation check for Barrel in CM", async ({ bookingpage }) => {
            await bookingpage.type(data.type_bar)
            await bookingpage.metric(data.met)
            await bookingpage.radius(data.bar_rad)
            await bookingpage.height(data.bar_hei_1)
            await bookingpage.heival_sin()
            await bookingpage.height(data.bar_hei)
            await bookingpage.hei_no_val_sin()
            await bookingpage.height(data.bar_hei)
            await bookingpage.no_of_pack(data.bar_w)
            await bookingpage.weight_per(data.bar_w)
            await bookingpage.twonine()
            await bookingpage.onefour()
            await bookingpage.diabled_show_quotes()

            await bookingpage.radius(data.bar_o)
            await bookingpage.height(data.bar_o)
            await bookingpage.no_of_pack(data.bar_o)
            await bookingpage.weight_per(data.bar_n)
            await bookingpage.three001_gross()
            await bookingpage.three001_charge()
            await bookingpage.diabled_show_quotes()

            await bookingpage.radius(data.bar_o)
            await bookingpage.height(data.bar_o)
            await bookingpage.no_of_pack(data.bar_o)
            await bookingpage.weight_per(data.bar_o)
            await bookingpage.fortyfive_gross()
            await bookingpage.fortyfive_charge()

            await bookingpage.radius(data.bar_w)
            await bookingpage.height(data.bar_w)
            await bookingpage.no_of_pack(data.bar_w)
            await bookingpage.weight_per(data.bar_w)
            await bookingpage.onefour_ori_gross()
            await bookingpage.onefour_ori_charge()
        })
        test("Calculation check for Barrel in Inch", async ({ bookingpage }) => {
            await bookingpage.type(data.type_bar)
            await bookingpage.metric(data.met_1)
            await bookingpage.radius(data.bar_rad)
            await bookingpage.height(data.bar_s_2)
            await bookingpage.heival_sin()
            await bookingpage.height(data.bar_s_1)
            await bookingpage.hei_no_val_sin()
            await bookingpage.height(data.bar_s)
            await bookingpage.no_of_pack(data.bar_w)
            await bookingpage.weight_per(data.bar_w)
            await bookingpage.onefour()
            await bookingpage.oneeight()
            await bookingpage.diabled_show_quotes()

            await bookingpage.radius(data.bar_o)
            await bookingpage.height(data.bar_o)
            await bookingpage.no_of_pack(data.bar_w)
            await bookingpage.weight_per(data.bar_w)
            await bookingpage.onefour_ori_gross()
            await bookingpage.onefour_ori_charge()

        })
        test("Calculation check for Rolls in CM", async ({ bookingpage }) => {
            await bookingpage.type(data.type_rol)
            await bookingpage.metric(data.met)
            await bookingpage.radius(data.bar_rad)
            await bookingpage.height(data.bar_hei_1)
            await bookingpage.heival_sin()
            await bookingpage.height(data.bar_hei)
            await bookingpage.hei_no_val_sin()
            await bookingpage.height(data.bar_hei)
            await bookingpage.no_of_pack(data.bar_w)
            await bookingpage.weight_per(data.bar_w)
            await bookingpage.twonine()
            await bookingpage.onefour()
            await bookingpage.diabled_show_quotes()

            await bookingpage.radius(data.bar_o)
            await bookingpage.height(data.bar_o)
            await bookingpage.no_of_pack(data.bar_o)
            await bookingpage.weight_per(data.bar_n)
            await bookingpage.three001_gross()
            await bookingpage.three001_charge()
            await bookingpage.diabled_show_quotes()

            await bookingpage.radius(data.bar_o)
            await bookingpage.height(data.bar_o)
            await bookingpage.no_of_pack(data.bar_o)
            await bookingpage.weight_per(data.bar_o)
            await bookingpage.fortyfive_gross()
            await bookingpage.fortyfive_charge()

            await bookingpage.radius(data.bar_w)
            await bookingpage.height(data.bar_w)
            await bookingpage.no_of_pack(data.bar_w)
            await bookingpage.weight_per(data.bar_w)
            await bookingpage.onefour_ori_gross()
            await bookingpage.onefour_ori_charge()
        })
        test("Calculation check for Rolls in Inch", async ({ bookingpage }) => {
            await bookingpage.type(data.type_rol)
            await bookingpage.metric(data.met_1)
            await bookingpage.radius(data.bar_rad)
            await bookingpage.height(data.bar_s_2)
            await bookingpage.heival_sin()
            await bookingpage.height(data.bar_s_1)
            await bookingpage.hei_no_val_sin()
            await bookingpage.height(data.bar_s)
            await bookingpage.no_of_pack(data.bar_w)
            await bookingpage.weight_per(data.bar_w)
            await bookingpage.onefour()
            await bookingpage.oneeight()
            await bookingpage.diabled_show_quotes()

            await bookingpage.radius(data.bar_o)
            await bookingpage.height(data.bar_o)
            await bookingpage.no_of_pack(data.bar_w)
            await bookingpage.weight_per(data.bar_w)
            await bookingpage.onefour_ori_gross()
            await bookingpage.onefour_ori_charge()

        })
        test("Adding more rows in pallet and check calculation for CM and Inch", async ({ bookingpage }) => {
            await bookingpage.type(data.type)
            await bookingpage.metric(data.met)
            await bookingpage.len(data.bar_o)
            await bookingpage.wid(data.bar_o)
            await bookingpage.height(data.bar_o)
            await bookingpage.no_of_pack(data.bar_w)
            await bookingpage.weight_per(data.bar_w)
            await bookingpage.addbutton()
            await bookingpage.type_1(data.type)
            await bookingpage.metric_1(data.met)
            await bookingpage.len_1(data.bar_o)
            await bookingpage.wid_1(data.bar_o)
            await bookingpage.height_1(data.bar_o)
            await bookingpage.no_of_pack_1(data.bar_w)
            await bookingpage.weight_per_1(data.bar_w)
            await bookingpage.twoeighty_eight_1()
            await bookingpage.twoeighty_eight_2()

            await bookingpage.type(data.type)
            await bookingpage.metric(data.met)
            await bookingpage.len(data.bar_t)
            await bookingpage.wid(data.bar_t)
            await bookingpage.height(data.bar_t)
            await bookingpage.no_of_pack(data.bar_w)
            await bookingpage.weight_per(data.bar_w)
            // await bookingpage.addbutton()
            await bookingpage.type_1(data.type)
            await bookingpage.metric_1(data.met)
            await bookingpage.len_1(data.bar_t)
            await bookingpage.wid_1(data.bar_t)
            await bookingpage.height_1(data.bar_t)
            await bookingpage.no_of_pack_1(data.bar_w)
            await bookingpage.weight_per_1(data.bar_w)
            await bookingpage.twoeighty_eight()
            await bookingpage.three_sixtyfive()

            await bookingpage.type(data.type)
            await bookingpage.metric(data.met_1)
            await bookingpage.len(data.bar_o)
            await bookingpage.wid(data.bar_o)
            await bookingpage.height(data.bar_o)
            await bookingpage.no_of_pack(data.bar_w)
            await bookingpage.weight_per(data.bar_w)
            // await bookingpage.addbutton()
            await bookingpage.type_1(data.type)
            await bookingpage.metric_1(data.met_1)
            await bookingpage.len_1(data.bar_o)
            await bookingpage.wid_1(data.bar_o)
            await bookingpage.height_1(data.bar_o)
            await bookingpage.no_of_pack_1(data.bar_w)
            await bookingpage.weight_per_1(data.bar_w)
            await bookingpage.twoeighty_eight_1()
            await bookingpage.twoeighty_eight_2()

            await bookingpage.type(data.type)
            await bookingpage.metric(data.met_1)
            await bookingpage.len(data.bar_t)
            await bookingpage.wid(data.bar_t)
            await bookingpage.height(data.bar_s)
            await bookingpage.no_of_pack(data.bar_w)
            await bookingpage.weight_per(data.bar_w)
            // await bookingpage.addbutton()
            await bookingpage.type_1(data.type)
            await bookingpage.metric_1(data.met_1)
            await bookingpage.len_1(data.bar_t)
            await bookingpage.wid_1(data.bar_t)
            await bookingpage.height_1(data.bar_s)
            await bookingpage.no_of_pack_1(data.bar_w)
            await bookingpage.weight_per_1(data.bar_w)
            await bookingpage.twoeighty_eight()
            await bookingpage.fourthousand_twentyfive()
        })
        test("Adding more rows in Barrel and check calculation for CM and Inch", async ({ page, bookingpage }) => {
            await bookingpage.type(data.type_bar)
            await bookingpage.metric(data.met)
            await bookingpage.radius(data.bar_o)
            await bookingpage.height(data.bar_o)
            await bookingpage.no_of_pack(data.bar_w)
            await bookingpage.weight_per(data.bar_w)
            await bookingpage.addbutton()
            await bookingpage.type_1(data.type_bar)
            await bookingpage.metric_1(data.met)
            await bookingpage.radius_1(data.bar_o)
            await bookingpage.height_1(data.bar_o)
            await bookingpage.no_of_pack_1(data.bar_w)
            await bookingpage.weight_per_1(data.bar_w)
            await bookingpage.twoeighty_eight_1()
            await bookingpage.twoeighty_eight_2()

            await bookingpage.type(data.type_bar)
            await bookingpage.metric(data.met)
            await bookingpage.radius(data.bar_t)
            await bookingpage.height(data.bar_t)
            await bookingpage.no_of_pack(data.bar_w)
            await bookingpage.weight_per(data.bar_w)
            // await bookingpage.addbutton()
            await bookingpage.type_1(data.type_bar)
            await bookingpage.metric_1(data.met)
            await bookingpage.radius_1(data.bar_t)
            await bookingpage.height_1(data.bar_t)
            await bookingpage.no_of_pack_1(data.bar_w)
            await bookingpage.weight_per_1(data.bar_w)
            await bookingpage.twoeighty_eight()
            await bookingpage.eleven_four_five()

            await bookingpage.type(data.type_bar)
            await bookingpage.metric(data.met_1)
            await bookingpage.radius(data.bar_o)
            await bookingpage.height(data.bar_o)
            await bookingpage.no_of_pack(data.bar_w)
            await bookingpage.weight_per(data.bar_w)
            // await bookingpage.addbutton()
            await bookingpage.type_1(data.type_bar)
            await bookingpage.metric_1(data.met_1)
            await bookingpage.radius_1(data.bar_t)
            await bookingpage.height_1(data.bar_o)
            await bookingpage.no_of_pack_1(data.bar_w)
            await bookingpage.weight_per_1(data.bar_w)
            await bookingpage.twoeighty_eight_1()
            await bookingpage.twoeighty_eight_2()

            await bookingpage.type(data.type_bar)
            await bookingpage.metric(data.met_1)
            await bookingpage.radius(data.bar_t)
            await bookingpage.height(data.bar_s)
            await bookingpage.no_of_pack(data.bar_w)
            await bookingpage.weight_per(data.bar_w)
            // await bookingpage.addbutton()
            await bookingpage.type_1(data.type_bar)
            await bookingpage.metric_1(data.met_1)
            await bookingpage.radius_1(data.bar_t)
            await bookingpage.height_1(data.bar_s)
            await bookingpage.no_of_pack_1(data.bar_w)
            await bookingpage.weight_per_1(data.bar_w)
            await bookingpage.twoeighty_eight()
            await bookingpage.fifteenthousand_four()

            // IMPORTANT
            await page.waitForTimeout(2000)
        })

    })

    test("Quote with multiple scenarios: ", async ({ baseURL, page, loginpage, bookingpage }) => {
        await page.goto(`${baseURL}book`)//origin.freight and destination total currency check
        await loginpage.username(data.uname)
        await loginpage.password(data.passw)
        await loginpage.loginbtn()
        await loginpage.toast()
        await bookingpage.newbook()
        await bookingpage.air()
        await bookingpage.origin(data.ori_sin)
        await bookingpage.destination(data.dest)
        await bookingpage.date(currentdate)
        await bookingpage.incoterm_exw()
        await bookingpage.zipcode(data.exw_zip)
        await bookingpage.place(data.exw_place)
        await bookingpage.nxt()

        await page.waitForTimeout(500)
        await bookingpage.type(data.type)
        await bookingpage.metric(data.met)
        await bookingpage.len(data.len)
        await bookingpage.wid(data.wid)
        await bookingpage.height(data.hei)
        await bookingpage.no_of_pack(data.no_of)
        await bookingpage.weight_per(data.weight_per)
        await bookingpage.commodity(data.commodity)
        await bookingpage.hsn_code(data.hsn_c)
        await page.keyboard.press('Enter')
        await bookingpage.show_quotes()

        await page.waitForTimeout(500)
        await bookingpage.currency_selector(data.cur_sin)
        await bookingpage.currency_selector(data.cur_usd)
        await bookingpage.currency_selector(data.cur_ind)
        await bookingpage.addservices_button()
        await bookingpage.add_serv_type(data.type_sez)
        await bookingpage.addservices_customs()
        await bookingpage.addservices_drop()
        await bookingpage.drop_sezpincode(data.sez_pincode)
        await bookingpage.drop_sezplace(data.sez_place)
        await bookingpage.insurance()
        await bookingpage.insurance_cur(data.cur_usd)
        await bookingpage.insurance_value(data.cargo_val)
        await bookingpage.carbonOffset()
        await bookingpage.savechanges()
        await bookingpage.addservicetoast()

        await bookingpage.quote_down()
        await bookingpage.Frequency()
        await bookingpage.Routing()
        await bookingpage.Booking_Cutoff()
        await bookingpage.Cargo_Handover_Cutoff()
        await bookingpage.ETD()
        await bookingpage.ETA()
        await bookingpage.origin_total_sin()
        await bookingpage.Origin()
        await bookingpage.Pick()
        await bookingpage.handling()
        await bookingpage.origincustoms()
        await bookingpage.terminal()
        await bookingpage.x_ray()
        await bookingpage.freight_total_sin()
        await bookingpage.Freight()
        await bookingpage.fsc()
        await bookingpage.ssc()
        await bookingpage.freight()
        await bookingpage.destination_total_sin
        await bookingpage.Destination()
        await bookingpage.do()
        await bookingpage.sez_customs()
        await bookingpage.sez_drop()
        await bookingpage.Insurance()
        await bookingpage.Co()
        await bookingpage.total_sin()
        await page.waitForTimeout(2000)

        await bookingpage.addservices_button()
        await bookingpage.add_serv_type(data.type_non_sez)
        await bookingpage.drop_nonpincode(data.add_pincode)
        await bookingpage.drop_nonplace(data.add_place)

        await bookingpage.savechanges()
        await bookingpage.addservicetoast()

        await bookingpage.Frequency()
        await bookingpage.Routing()
        await bookingpage.Booking_Cutoff()
        await bookingpage.Cargo_Handover_Cutoff()
        await bookingpage.ETD()
        await bookingpage.ETA()
        await bookingpage.Origin()
        await bookingpage.origin_total_sin()
        await bookingpage.Pick()
        await bookingpage.handling()
        await bookingpage.origincustoms()
        await bookingpage.terminal()
        await bookingpage.x_ray()
        await bookingpage.Freight()
        await bookingpage.freight_total_sin()
        await bookingpage.fsc()
        await bookingpage.ssc()
        await bookingpage.freight()
        await bookingpage.Destination()
        await bookingpage.destination_total_sin()
        await bookingpage.do()
        await bookingpage.non_sez_customs()
        await bookingpage.non_sez_drop()
        await bookingpage.Insurance()
        await bookingpage.Co()
        await bookingpage.total_sin()

        await bookingpage.quote_submit()

    })
    test.describe("cargo address with multiple scenarios: ", async () => {
        test.beforeEach(async ({ }, testInfo) => {
            // Extend timeout for all tests running this hook by 30 seconds.
            testInfo.setTimeout(testInfo.timeout + 30000);
        });
        test("Adding new address for exw incoterm and additional services(sez)", async ({ baseURL, page, loginpage, bookingpage }) => {
            await page.goto(`${baseURL}book`)//validation msg need to check by typing non-accepting characters like spl and numbers
            await loginpage.username(data.uname_1)
            await loginpage.password(data.passw_1)
            await loginpage.loginbtn()
            await loginpage.toast()
            await bookingpage.newbook()
            await bookingpage.air()
            await bookingpage.origin(data.ori_sin)
            await bookingpage.destination(data.dest)
            await bookingpage.date(currentdate)
            await bookingpage.incoterm_exw()
            await bookingpage.zipcode(data.exw_zipconst)
            await bookingpage.place(data.exw_placeconst)
            await bookingpage.nxt()

            await page.waitForTimeout(500)
            await bookingpage.type(data.type)
            await bookingpage.metric(data.met)
            await bookingpage.len(data.len)
            await bookingpage.wid(data.wid)
            await bookingpage.height(data.hei)
            await bookingpage.no_of_pack(data.no_of)
            await bookingpage.weight_per(data.weight_per)
            await bookingpage.commodity(data.commodity)
            await bookingpage.hsn_code(data.hsn_c)
            await page.keyboard.press('Enter')
            await bookingpage.show_quotes()

            await page.waitForTimeout(500)
            await bookingpage.currency_selector(data.cur_sin)
            await bookingpage.currency_selector(data.cur_ind)
            await bookingpage.currency_selector(data.cur_usd)
            await bookingpage.addservices_button()
            await bookingpage.add_serv_type(data.type_sez)
            await bookingpage.addservices_customs()
            await bookingpage.addservices_drop()
            await bookingpage.drop_sezpincode(data.sez_pincode)
            await bookingpage.drop_sezplace(data.sez_place)
            await bookingpage.insurance()
            await bookingpage.insurance_cur(data.cur_usd)
            await bookingpage.insurance_value(data.cargo_val)
            await bookingpage.carbonOffset()
            await bookingpage.savechanges()

            await bookingpage.quote_down()
            await bookingpage.Frequency()
            await bookingpage.Routing()
            await bookingpage.Booking_Cutoff()
            await bookingpage.Cargo_Handover_Cutoff()
            await bookingpage.ETD()
            await bookingpage.ETA()
            await bookingpage.Origin()
            await bookingpage.Pick()
            await bookingpage.handling()
            await bookingpage.origincustoms()
            await bookingpage.terminal()
            await bookingpage.x_ray()
            await bookingpage.Freight()
            await bookingpage.fsc()
            await bookingpage.ssc()
            await bookingpage.freight()
            await bookingpage.Destination()
            await bookingpage.do()
            await bookingpage.sez_customs()
            await bookingpage.sez_drop()
            await bookingpage.Insurance()
            await bookingpage.Co()

            await bookingpage.quote_submit()

            await bookingpage.saved_address()
            await bookingpage.saved_no_use_button()
            await bookingpage.saved_close_icon()
            await bookingpage.add_fn(data.fn)
            await bookingpage.add_ln(data.ln)
            await bookingpage.add_mail(data.shimail)
            await bookingpage.add_ph_code(data.phone_co)
            await page.keyboard.press('Enter')
            await bookingpage.add_number(data.phone_no)

            await bookingpage.shi_companyName(data.shicom)
            await bookingpage.shi_buildingName(data.shibui)
            await bookingpage.shi_doorNo(data.shidoor)
            await bookingpage.shi_streetName(data.shist)
            await bookingpage.shi_area(data.shiarea)
            await bookingpage.shi_country_exw()
            await bookingpage.shi_state_exw()
            await bookingpage.shi_district_exw()
            await bookingpage.shi_addresszipcode_exw()
            await bookingpage.shi_city_exw()
            await bookingpage.shi_nxt()

            await bookingpage.saved_address()
            await bookingpage.saved_no_use_button()
            await bookingpage.saved_close_icon()
            await bookingpage.del_gst(data.delgst)
            await bookingpage.del_gst_file(data.delgstfile)
            await bookingpage.del_company()
            await bookingpage.del_branch(data.delbranch)
            await bookingpage.del_buildingname(data.delbuilding)
            await bookingpage.del_doorno(data.deldoor)
            await bookingpage.del_streetname(data.delstreet)
            await bookingpage.del_areaname(data.delarea)
            await bookingpage.del_country_all()
            await bookingpage.del_state_exw()
            await bookingpage.del_district_exw()
            await bookingpage.del_pincode_exw()
            await bookingpage.del_city_exw()
            await bookingpage.bill_to_checkbox()
            await bookingpage.bill_saved_address()
            await bookingpage.saved_no_use_button()
            await bookingpage.saved_close_icon()
            await bookingpage.bill_to_checkbox()
            await bookingpage.shi_nxt()


            await bookingpage.confirm_booking()
            await bookingpage.proceed()
            await bookingpage.gstuploadtoast()
            await bookingpage.bookconfirmtoast()
        })
        test("check address is saved in saved address for shipper and delivery", async ({ baseURL, page, loginpage, bookingpage }) => {
            await page.goto(`${baseURL}book`)// for delivery saved address need to check
            await loginpage.username(data.uname_1)
            await loginpage.password(data.passw_1)
            await loginpage.loginbtn()
            await loginpage.toast()
            await bookingpage.newbook()
            await bookingpage.air()
            await bookingpage.origin(data.ori_sin)
            await bookingpage.destination(data.dest)
            await bookingpage.date(currentdate)
            await bookingpage.incoterm_exw()
            await bookingpage.zipcode(data.exw_zipconst)
            await bookingpage.place(data.exw_placeconst)
            await bookingpage.nxt()

            await page.waitForTimeout(500)
            await bookingpage.type(data.type)
            await bookingpage.metric(data.met)
            await bookingpage.len(data.len)
            await bookingpage.wid(data.wid)
            await bookingpage.height(data.hei)
            await bookingpage.no_of_pack(data.no_of)
            await bookingpage.weight_per(data.weight_per)
            await bookingpage.commodity(data.commodity)
            await bookingpage.hsn_code(data.hsn_c)
            await page.keyboard.press('Enter')
            await bookingpage.show_quotes()

            await page.waitForTimeout(500)
            await bookingpage.currency_selector(data.cur_sin)
            await bookingpage.currency_selector(data.cur_ind)
            await bookingpage.currency_selector(data.cur_usd)
            await bookingpage.addservices_button()
            await bookingpage.add_serv_type(data.type_sez)
            await bookingpage.addservices_customs()
            await bookingpage.addservices_drop()
            await bookingpage.drop_sezpincode(data.sez_pincode)
            await bookingpage.drop_sezplace(data.sez_place)
            await bookingpage.insurance()
            await bookingpage.insurance_cur(data.cur_usd)
            await bookingpage.insurance_value(data.cargo_val)
            await bookingpage.carbonOffset()
            await bookingpage.savechanges()

            await bookingpage.quote_down()
            await bookingpage.Frequency()
            await bookingpage.Routing()
            await bookingpage.Booking_Cutoff()
            await bookingpage.Cargo_Handover_Cutoff()
            await bookingpage.ETD()
            await bookingpage.ETA()
            await bookingpage.Origin()
            await bookingpage.Pick()
            await bookingpage.handling()
            await bookingpage.origincustoms()
            await bookingpage.terminal()
            await bookingpage.x_ray()
            await bookingpage.Freight()
            await bookingpage.fsc()
            await bookingpage.ssc()
            await bookingpage.freight()
            await bookingpage.Destination()
            await bookingpage.do()
            await bookingpage.sez_customs()
            await bookingpage.sez_drop()
            await bookingpage.Insurance()
            await bookingpage.Co()

            await bookingpage.quote_submit()

            await bookingpage.saved_address()
            await bookingpage.saved_use_button()
            await bookingpage.add_fn(data.fn)
            await bookingpage.add_ln(data.ln)
            await bookingpage.add_mail(data.shimail)
            await bookingpage.add_ph_code(data.phone_co)
            await page.keyboard.press('Enter')
            await bookingpage.add_number(data.phone_no)
            await bookingpage.shi_nxt()

            await bookingpage.saved_address()
            await bookingpage.saved_use_button()
            await page.close()

        })
        test("check address is not saved in saved address for shipper and delivery", async ({ baseURL, page, loginpage, bookingpage }) => {
            await page.goto(`${baseURL}book`)// for delivery saved address need to check
            await loginpage.username(data.uname_1)
            await loginpage.password(data.passw_1)
            await loginpage.loginbtn()
            await loginpage.toast()
            await bookingpage.newbook()
            await bookingpage.air()
            await bookingpage.origin(data.ori_sin)
            await bookingpage.destination(data.dest)
            await bookingpage.date(currentdate)
            await bookingpage.incoterm_exw()
            await bookingpage.zipcode(data.exw_zip1)
            await bookingpage.place(data.exw_place1)
            await bookingpage.nxt()

            await page.waitForTimeout(500)
            await bookingpage.type(data.type)
            await bookingpage.metric(data.met)
            await bookingpage.len(data.len)
            await bookingpage.wid(data.wid)
            await bookingpage.height(data.hei)
            await bookingpage.no_of_pack(data.no_of)
            await bookingpage.weight_per(data.weight_per)
            await bookingpage.commodity(data.commodity)
            await bookingpage.hsn_code(data.hsn_c)
            await page.keyboard.press('Enter')
            await bookingpage.show_quotes()

            await page.waitForTimeout(500)
            await bookingpage.currency_selector(data.cur_sin)
            await bookingpage.currency_selector(data.cur_ind)
            await bookingpage.currency_selector(data.cur_usd)
            await bookingpage.addservices_button()
            await bookingpage.add_serv_type(data.type_non_sez)
            await bookingpage.addservices_customs()
            await bookingpage.addservices_drop()
            await bookingpage.drop_nonpincode(data.add_pincode)
            await bookingpage.drop_nonplace(data.add_place)
            await bookingpage.insurance()
            await bookingpage.insurance_cur(data.cur_usd)
            await bookingpage.insurance_value(data.cargo_val)
            await bookingpage.carbonOffset()
            await bookingpage.savechanges()

            await bookingpage.quote_down()
            await bookingpage.Frequency()
            await bookingpage.Routing()
            await bookingpage.Booking_Cutoff()
            await bookingpage.Cargo_Handover_Cutoff()
            await bookingpage.ETD()
            await bookingpage.ETA()
            await bookingpage.Origin()
            await bookingpage.Pick()
            await bookingpage.handling()
            await bookingpage.origincustoms()
            await bookingpage.terminal()
            await bookingpage.x_ray()
            await bookingpage.Freight()
            await bookingpage.fsc()
            await bookingpage.ssc()
            await bookingpage.freight()
            await bookingpage.Destination()
            await bookingpage.do()
            await bookingpage.non_sez_customs()
            await bookingpage.non_sez_drop()
            await bookingpage.Insurance()
            await bookingpage.Co()

            await bookingpage.quote_submit()

            await bookingpage.saved_address()
            await bookingpage.saved_no_use_button()
            await bookingpage.saved_close_icon()
            await bookingpage.add_fn(data.fn)
            await bookingpage.add_ln(data.ln)
            await bookingpage.add_mail(data.shimail)
            await bookingpage.add_ph_code(data.phone_co)
            await page.keyboard.press('Enter')
            await bookingpage.add_number(data.phone_no)

            await bookingpage.shi_companyName(data.shicom)
            await bookingpage.shi_buildingName(data.shibui)
            await bookingpage.shi_doorNo(data.shidoor)
            await bookingpage.shi_streetName(data.shist)
            await bookingpage.shi_area(data.shiarea)
            await bookingpage.shi_country_exw()
            await bookingpage.shi_state_exw()
            await bookingpage.shi_district_exw()
            await bookingpage.shi_addresszipcode_exw()
            await bookingpage.shi_city_exw()
            await bookingpage.shi_nxt()

            await bookingpage.saved_address()
            await bookingpage.saved_no_use_button()
            await page.close()

        })
        test("check while using address from saved address would get any duplicate", async ({ baseURL, page, loginpage, bookingpage }) => {
            await page.goto(`${baseURL}book`)// for delivery saved address need to check
            await loginpage.username(data.uname_1)
            await loginpage.password(data.passw_1)
            await loginpage.loginbtn()
            await loginpage.toast()
            await bookingpage.newbook()
            await bookingpage.air()
            await bookingpage.origin(data.ori_sin)
            await bookingpage.destination(data.dest)
            await bookingpage.date(currentdate)
            await bookingpage.incoterm_exw()
            await bookingpage.zipcode(data.exw_zipconst)
            await bookingpage.place(data.exw_placeconst)
            await bookingpage.nxt()

            await page.waitForTimeout(500)
            await bookingpage.type(data.type)
            await bookingpage.metric(data.met)
            await bookingpage.len(data.len)
            await bookingpage.wid(data.wid)
            await bookingpage.height(data.hei)
            await bookingpage.no_of_pack(data.no_of)
            await bookingpage.weight_per(data.weight_per)
            await bookingpage.commodity(data.commodity)
            await bookingpage.hsn_code(data.hsn_c)
            await page.keyboard.press('Enter')
            await bookingpage.show_quotes()

            await page.waitForTimeout(500)
            await bookingpage.currency_selector(data.cur_sin)
            await bookingpage.currency_selector(data.cur_ind)
            await bookingpage.currency_selector(data.cur_usd)
            await bookingpage.addservices_button()
            await bookingpage.add_serv_type(data.type_sez)
            await bookingpage.addservices_customs()
            await bookingpage.addservices_drop()
            await bookingpage.drop_sezpincode(data.sez_pincode)
            await bookingpage.drop_sezplace(data.sez_place)
            await bookingpage.insurance()
            await bookingpage.insurance_cur(data.cur_usd)
            await bookingpage.insurance_value(data.cargo_val)
            await bookingpage.carbonOffset()
            await bookingpage.savechanges()

            await bookingpage.quote_down()
            await bookingpage.Frequency()
            await bookingpage.Routing()
            await bookingpage.Booking_Cutoff()
            await bookingpage.Cargo_Handover_Cutoff()
            await bookingpage.ETD()
            await bookingpage.ETA()
            await bookingpage.Origin()
            await bookingpage.Pick()
            await bookingpage.handling()
            await bookingpage.origincustoms()
            await bookingpage.terminal()
            await bookingpage.x_ray()
            await bookingpage.Freight()
            await bookingpage.fsc()
            await bookingpage.ssc()
            await bookingpage.freight()
            await bookingpage.Destination()
            await bookingpage.do()
            await bookingpage.sez_customs()
            await bookingpage.sez_drop()
            await bookingpage.Insurance()
            await bookingpage.Co()

            await bookingpage.quote_submit()

            await bookingpage.saved_address()
            await bookingpage.saved_use_button()
            await bookingpage.add_fn(data.fn)
            await bookingpage.add_ln(data.ln)
            await bookingpage.add_mail(data.shimail)
            await bookingpage.add_ph_code(data.phone_co)
            await page.keyboard.press('Enter')
            await bookingpage.add_number(data.phone_no)
            await bookingpage.shi_nxt()

            await bookingpage.del_gst(data.delgst)
            await bookingpage.del_gst_file(data.delgstfile)
            await bookingpage.del_company()
            await bookingpage.del_branch(data.delbranch)
            await bookingpage.del_buildingname(data.delbuilding)
            await bookingpage.del_doorno(data.deldoor)
            await bookingpage.del_streetname(data.delstreet)
            await bookingpage.del_areaname(data.delarea)
            await bookingpage.del_country_all()
            await bookingpage.del_state_exw()
            await bookingpage.del_district_exw()
            await bookingpage.del_pincode_exw()
            await bookingpage.del_city_exw()
            await bookingpage.shi_nxt()

            await bookingpage.confirm_booking()
            await bookingpage.proceed()
            await page.waitForTimeout(1000)
            await bookingpage.newbook()
            await bookingpage.air()

            await bookingpage.origin(data.ori_sin)
            await bookingpage.destination(data.dest)
            await bookingpage.date(currentdate)
            await bookingpage.incoterm_exw()
            await bookingpage.zipcode(data.exw_zip)
            await bookingpage.place(data.exw_place)
            await bookingpage.nxt()

            await page.waitForTimeout(500)
            await bookingpage.type(data.type)
            await bookingpage.metric(data.met)
            await bookingpage.len(data.len)
            await bookingpage.wid(data.wid)
            await bookingpage.height(data.hei)
            await bookingpage.no_of_pack(data.no_of)
            await bookingpage.weight_per(data.weight_per)
            await bookingpage.commodity(data.commodity)
            await bookingpage.hsn_code(data.hsn_c)
            await page.keyboard.press('Enter')
            await bookingpage.show_quotes()

            await page.waitForTimeout(500)
            await bookingpage.currency_selector(data.cur_sin)
            await bookingpage.currency_selector(data.cur_ind)
            await bookingpage.currency_selector(data.cur_usd)
            await bookingpage.addservices_button()
            await bookingpage.add_serv_type(data.type_sez)
            await bookingpage.addservices_customs()
            await bookingpage.addservices_drop()
            await bookingpage.drop_sezpincode(data.sez_pincode)
            await bookingpage.drop_sezplace(data.sez_place)
            await bookingpage.insurance()
            await bookingpage.insurance_cur(data.cur_usd)
            await bookingpage.insurance_value(data.cargo_val)
            await bookingpage.carbonOffset()
            await bookingpage.savechanges()

            await bookingpage.quote_down()
            await bookingpage.Frequency()
            await bookingpage.Routing()
            await bookingpage.Booking_Cutoff()
            await bookingpage.Cargo_Handover_Cutoff()
            await bookingpage.ETD()
            await bookingpage.ETA()
            await bookingpage.Origin()
            await bookingpage.Pick()
            await bookingpage.handling()
            await bookingpage.origincustoms()
            await bookingpage.terminal()
            await bookingpage.x_ray()
            await bookingpage.Freight()
            await bookingpage.fsc()
            await bookingpage.ssc()
            await bookingpage.freight()
            await bookingpage.Destination()
            await bookingpage.do()
            await bookingpage.sez_customs()
            await bookingpage.sez_drop()
            await bookingpage.Insurance()
            await bookingpage.Co()

            await bookingpage.quote_submit()
            await bookingpage.saved_address()
            await page.waitForTimeout(2000)
            await bookingpage.saved_second_no_use_button()

            await page.close()

        })
        test("check all address saved in billing saved address", async ({ baseURL, page, loginpage, bookingpage }) => {
            await page.goto(`${baseURL}book`)// IN fob singapore dollar wasn't there !BUG
            await loginpage.username(data.uname_1)
            await loginpage.password(data.passw_1)
            await loginpage.loginbtn()
            await loginpage.toast()
            await bookingpage.newbook()
            await bookingpage.air()
            await bookingpage.origin(data.ori_sin)
            await bookingpage.destination(data.dest)
            await bookingpage.date(currentdate)
            await bookingpage.incoterm_fca()
            await bookingpage.nxt()

            await page.waitForTimeout(500)
            await bookingpage.type(data.type)
            await bookingpage.metric(data.met)
            await bookingpage.len(data.len)
            await bookingpage.wid(data.wid)
            await bookingpage.height(data.hei)
            await bookingpage.no_of_pack(data.no_of)
            await bookingpage.weight_per(data.weight_per)
            await bookingpage.commodity(data.commodity)
            await bookingpage.hsn_code(data.hsn_c)
            await page.keyboard.press('Enter')
            await bookingpage.show_quotes()

            await page.waitForTimeout(500)
            await bookingpage.currency_selector(data.cur_sin)
            await bookingpage.currency_selector(data.cur_ind)
            await bookingpage.currency_selector(data.cur_usd)

            await bookingpage.quote_down()
            await bookingpage.Frequency()
            await bookingpage.Routing()
            await bookingpage.Booking_Cutoff()
            await bookingpage.Cargo_Handover_Cutoff()
            await bookingpage.ETD()
            await bookingpage.ETA()
            await bookingpage.Freight()
            await bookingpage.fsc()
            await bookingpage.ssc()
            await bookingpage.freight()
            await bookingpage.Destination()
            await bookingpage.do()

            await bookingpage.quote_submit()

            await bookingpage.saved_address()
            await bookingpage.saved_use_button()
            await bookingpage.add_fn(data.fn)
            await bookingpage.add_ln(data.ln)
            await bookingpage.add_mail(data.shimail)
            await bookingpage.add_ph_code(data.phone_co)
            await page.keyboard.press('Enter')
            await bookingpage.add_number(data.phone_no)
            await bookingpage.shi_nxt()

            await bookingpage.saved_address()
            await bookingpage.saved_use_button_1()
            // await bookingpage.saved_use_button_2()


            await page.close()

        })
    })

    test("Air Booking on Dokonaly:", async ({ baseURL, page, loginpage, bookingpage }) => {
        await page.goto(`${baseURL}login/`)
        await loginpage.username(data.uname)
        await loginpage.password(data.passw)
        await loginpage.loginbtn()
        await loginpage.toast()
        await bookingpage.newbook()
        await bookingpage.air()
        await bookingpage.origin(data.ori_sin)
        await bookingpage.destination(data.dest)
        await bookingpage.date(currentdate)
        await bookingpage.incoterm_exw()
        await bookingpage.zipcode(data.exw_zip)
        await bookingpage.place(data.exw_place)
        await bookingpage.nxt()

        await page.waitForTimeout(500)
        await bookingpage.type(data.type)
        await bookingpage.metric(data.met)
        await bookingpage.len(data.len)
        await bookingpage.wid(data.wid)
        await bookingpage.height(data.hei)
        await bookingpage.no_of_pack(data.no_of)
        await bookingpage.weight_per(data.weight_per)
        await bookingpage.commodity(data.commodity)
        await bookingpage.hsn_code(data.hsn_c)
        await page.keyboard.press('Enter')
        await bookingpage.show_quotes()

        await page.waitForTimeout(1000)

        await bookingpage.quote_down()
        await bookingpage.Frequency()
        await bookingpage.Routing()
        await bookingpage.Booking_Cutoff()
        await bookingpage.Cargo_Handover_Cutoff()
        await bookingpage.ETD()
        await bookingpage.ETA()
        await bookingpage.Origin()
        await bookingpage.Pick()
        await bookingpage.handling()
        await bookingpage.origincustoms()
        await bookingpage.terminal()
        await bookingpage.x_ray()
        await bookingpage.Freight()
        await bookingpage.fsc()
        await bookingpage.ssc()
        await bookingpage.freight()
        await bookingpage.Destination()
        await bookingpage.do()
        await bookingpage.quote_submit()

        await bookingpage.add_fn(data.fn)
        await bookingpage.add_ln(data.ln)
        await bookingpage.add_mail(data.shimail)
        await bookingpage.add_ph_code(data.phone_co)
        await page.keyboard.press('Enter')
        await bookingpage.add_number(data.phone_no)
        await bookingpage.shi_companyName(data.shicom)
        await bookingpage.shi_buildingName(data.shibui)
        await bookingpage.shi_doorNo(data.shidoor)
        await bookingpage.shi_streetName(data.shist)
        await bookingpage.shi_area(data.shiarea)
        await bookingpage.shi_country_exw()
        await bookingpage.shi_state_exw()
        await bookingpage.shi_district_exw()
        await bookingpage.shi_addresszipcode_exw()
        await bookingpage.shi_city_exw()
        await bookingpage.shi_nxt()

        await bookingpage.bill_gst(data.billgst)
        await bookingpage.bill_gst_file(data.billgstfile)
        await bookingpage.bill_company()
        await bookingpage.bill_branch(data.billbranch)
        await bookingpage.bill_buildingname(data.billbuilding)
        await bookingpage.bill_doorno(data.billdoor)
        await bookingpage.bill_streetname(data.billstreet)
        await bookingpage.bill_areaname(data.billarea)
        await bookingpage.bill_country_all()
        await bookingpage.bill_state(data.billstate)
        await page.keyboard.press('ArrowDown')
        await page.keyboard.press('Enter')
       
       
        await bookingpage.bill_district(data.billdistrict)
        await page.keyboard.press('ArrowDown')
        await page.keyboard.press('Enter')
        // await page.pause()
        await bookingpage.bill_pincode(data.billpincode)
        await page.keyboard.press('ArrowDown')
        await page.keyboard.press('Enter')
        await bookingpage.bill_city(data.billcity)
        await page.keyboard.press('ArrowDown')
        await page.keyboard.press('Enter')
        await bookingpage.shi_nxt()

        await bookingpage.confirm_booking()
        await bookingpage.proceed()




    })
    test("LCL Booking on Dokonaly For Chek Lap Kok:", async ({ baseURL, page, loginpage, bookingpage }) => {
        await page.goto(`${baseURL}login/`)
        await loginpage.username(data.uname_1)
        await loginpage.password(data.passw_1)
        await loginpage.loginbtn()
        await loginpage.toast()
    
        await page.waitForTimeout(2000)
        await bookingpage.newbook()
        await bookingpage.lcl()
        await page.waitForTimeout(1500)
        await bookingpage.origin(data.lclori_hk)
        await bookingpage.destination(data.dest)
        await bookingpage.date(currentdate)
        await bookingpage.incoterm_exw()
        await bookingpage.place(data.hk_place)
        await page.waitForTimeout(1000)
        await bookingpage.nxt()
    
        await page.waitForTimeout(2000)
        await bookingpage.stackable()
        await bookingpage.type(data.type_cra)
        await bookingpage.metric(data.met)
        await bookingpage.len(data.len)
        await bookingpage.wid(data.wid)
        await bookingpage.height(data.hei)
        await bookingpage.no_of_pack(data.no_of)
        await bookingpage.weight_per(data.weight_per)
        await bookingpage.commodity(data.commodity)
        await bookingpage.hsn_code(data.hsn_c)
        await page.keyboard.press('Enter')
        await page.pause()
        await page.waitForTimeout(1000)
        await bookingpage.show_quotes()
    
        await bookingpage.currency_selector(data.cur_hkd)
        await bookingpage.currency_selector(data.cur_usd)
        await bookingpage.currency_selector(data.cur_ind)
    
        await bookingpage.quote_down()
      
        await bookingpage.ETD()
        await bookingpage.ETA()
        await bookingpage.Origin()
        await bookingpage.Freight()
        await bookingpage.Destination()
        await bookingpage.do()
        
        await bookingpage.quote_submit()
    
        await page.waitForTimeout(1000)
        await bookingpage.add_fn(data.fn)
        await bookingpage.add_ln(data.ln)
        await bookingpage.add_mail(data.shimail)
        await bookingpage.add_ph_code(data.phone_co)
        await page.keyboard.press('Enter')
        await bookingpage.add_number(data.phone_no)
        await bookingpage.shi_companyName(data.shicom)
        await bookingpage.shi_buildingName(data.shibui)
        await bookingpage.shi_doorNo(data.shidoor)
        await bookingpage.shi_streetName(data.shist)
        await bookingpage.shi_area(data.shiarea)
        await bookingpage.shi_country_exw()
        await bookingpage.shi_district_exw()
        await bookingpage.shi_city_exw()
        await bookingpage.lcl_po(data.po)
        await page.waitForTimeout(1000)
        await bookingpage.shi_nxt()
        
        await bookingpage.bill_gst(data.delgst)
        await bookingpage.bill_gst_file(data.delgstfile)
        await bookingpage.bill_company()
        await bookingpage.bill_branch(data.delbranch)
        await bookingpage.bill_buildingname(data.delbuilding)
        await bookingpage.bill_doorno(data.deldoor)
        await bookingpage.bill_streetname(data.delstreet)
        await bookingpage.bill_areaname(data.delarea)
        await page.pause()
        await bookingpage.bill_country_all()
        await bookingpage.bill_district("as")
        await bookingpage.bill_pincode('as')
        await bookingpage.bill_city("as")
    
        await bookingpage.shi_nxt()
    
    
        await bookingpage.confirm_booking()
        await bookingpage.proceed()
        await bookingpage.gstuploadtoast()
        await bookingpage.bookconfirmtoast()       
    
    
    
    })
})

test.describe("My Bookings: ", async()=>{
     test.skip("In my bookings check basic functionalities ",async({baseURL, page, loginpage,bookingpage, mybookingpage})=>{
        await page.goto(`${baseURL}book`)//validation msg need to check by typing non-accepting characters like spl and numbers
        await loginpage.username(data.uname_1)
        await loginpage.password(data.passw_1)
        await loginpage.loginbtn()
        await loginpage.toast()
        await bookingpage.mybook()
        await bookingpage.air()
        await mybookingpage.mybook_airtitle()
        await mybookingpage.mybook_number_of_bookings5()
        await mybookingpage.Booking_Id()
        await mybookingpage.POL()
        await mybookingpage.POD()
        await mybookingpage.SHIPPER()
        await mybookingpage.Incoterm()
        await mybookingpage.ETD()
        await mybookingpage.ETA()
        await mybookingpage.Booked_Date()
        await mybookingpage.Action()
        await mybookingpage.port_select(data.ori_sin)
        await mybookingpage.mybook_number_of_bookings5()
        await mybookingpage.port_select(data.ori_hk)
        await mybookingpage.mybook_number_of_bookings1()
        await mybookingpage.port_select(data.ori_fra)
        await mybookingpage.mybook_number_of_bookings0()
        await mybookingpage.port_select(data.all_ports)
        await mybookingpage.mybook_number_of_bookings6()

        await bookingpage.newbook()
        await bookingpage.air()
        await bookingpage.origin(data.ori_sin)
        await bookingpage.destination(data.dest)
        await bookingpage.date(currentdate)
        await bookingpage.incoterm_exw()
        await bookingpage.zipcode(data.exw_zip)
        await bookingpage.place(data.exw_place)
        await bookingpage.nxt()

        await page.waitForTimeout(500)
        await bookingpage.type(data.type)
        await bookingpage.metric(data.met)
        await bookingpage.len(data.len)
        await bookingpage.wid(data.wid)
        await bookingpage.height(data.hei)
        await bookingpage.no_of_pack(data.no_of)
        await bookingpage.weight_per(data.weight_per)
        await bookingpage.commodity(data.commodity)
        await bookingpage.hsn_code(data.hsn_c)
        await page.keyboard.press('Enter')
        await bookingpage.show_quotes()

        await page.waitForTimeout(1000)

        await bookingpage.quote_down()
        await bookingpage.Frequency()
        await bookingpage.Routing()
        await bookingpage.Booking_Cutoff()
        await bookingpage.Cargo_Handover_Cutoff()
        await bookingpage.ETD()
        await bookingpage.ETA()
        await bookingpage.Origin()
        await bookingpage.Pick()
        await bookingpage.handling()
        await bookingpage.origincustoms()
        await bookingpage.terminal()
        await bookingpage.x_ray()
        await bookingpage.Freight()
        await bookingpage.fsc()
        await bookingpage.ssc()
        await bookingpage.freight()
        await bookingpage.Destination()
        await bookingpage.do()
        await bookingpage.quote_submit()

        await bookingpage.add_fn(data.fn)
        await bookingpage.add_ln(data.ln)
        await bookingpage.add_mail(data.shimail)
        await bookingpage.add_ph_code(data.phone_co)
        await page.keyboard.press('Enter')
        await bookingpage.add_number(data.phone_no)
        await bookingpage.shi_companyName(data.shicom)
        await bookingpage.shi_buildingName(data.shibui)
        await bookingpage.shi_doorNo(data.shidoor)
        await bookingpage.shi_streetName(data.shist)
        await bookingpage.shi_area(data.shiarea)
        await bookingpage.shi_country_exw()
        await bookingpage.shi_state_exw()
        await bookingpage.shi_district_exw()
        await bookingpage.shi_addresszipcode_exw()
        await bookingpage.shi_city_exw()
        await bookingpage.shi_nxt()

        await bookingpage.bill_gst(data.billgst)
        await bookingpage.bill_gst_file(data.billgstfile)
        await bookingpage.bill_company()
        await bookingpage.bill_branch(data.billbranch)
        await bookingpage.bill_buildingname(data.billbuilding)
        await bookingpage.bill_doorno(data.billdoor)
        await bookingpage.bill_streetname(data.billstreet)
        await bookingpage.bill_areaname(data.billarea)
        await bookingpage.bill_country_all()
        await bookingpage.bill_state(data.billstate)
        await page.keyboard.press('Enter')
        await bookingpage.bill_district(data.billdistrict)
        await page.keyboard.press('Enter')
        await bookingpage.bill_pincode(data.billpincode)
        await page.keyboard.press('Enter')
        await bookingpage.bill_city(data.billcity)
        await page.keyboard.press('Enter')
        await bookingpage.shi_nxt()

        await bookingpage.confirm_booking()
        await bookingpage.proceed()
        await mybookingpage.port_select(data.ori_sin)
        await mybookingpage.mybook_number_of_bookings6()

     })
     test("Assert the existing data in my bookings and check milestone for exw without drop (Singapore)",async({baseURL,loginpage,page,bookingpage,mybookingpage})=>{
        await page.goto(`${baseURL}book`)//want new id for drop place
        await loginpage.username(data.uname_1)
        await loginpage.password(data.passw_1)
        await loginpage.loginbtn()
        await loginpage.toast()
        await bookingpage.mybook()
        await bookingpage.air()
        await mybookingpage.mybook_airtitle()     
        await mybookingpage.port_select(data.ori_sin)
        await mybookingpage.singapore_1()
        await mybookingpage.chennai_1()
        await mybookingpage.cmp_1()
        await mybookingpage.sin_activeclck()
        await mybookingpage.mile_1()
        await mybookingpage.mile_2()
        await mybookingpage.mile_3()
        await mybookingpage.mile_4()
        await mybookingpage.mile_5()
        await mybookingpage.mile_6()
        await mybookingpage.mile_7()
        await mybookingpage.mile_8()
        await mybookingpage.mile_9()
        await mybookingpage.mile_10()
        await mybookingpage.mile_11()
        await mybookingpage.mile_nodrop()
        

    })
     test("Assert the existing data in my bookings and check milestone for exw with drop (Thailand)",async({baseURL,loginpage,page,bookingpage,mybookingpage})=>{
        await page.goto(`${baseURL}book`)//validation msg need to check by typing non-accepting characters like spl and numbers
        await loginpage.username(data.uname_1)
        await loginpage.password(data.passw_1)
        await loginpage.loginbtn()
        await loginpage.toast()

        await bookingpage.newbook()
        await bookingpage.air()
        await bookingpage.origin(data.ori_th)
        await bookingpage.destination(data.dest)
        await bookingpage.date(currentdate)
        await bookingpage.incoterm_exw()
        await bookingpage.zipcode(data.th_zip)
        await bookingpage.place(data.th_place)
        await bookingpage.nxt()

        await page.waitForTimeout(500)
        await bookingpage.type(data.type)
        await bookingpage.metric(data.met)
        await bookingpage.len(data.len)
        await bookingpage.wid(data.wid)
        await bookingpage.height(data.hei)
        await bookingpage.no_of_pack(data.no_of)
        await bookingpage.weight_per(data.weight_per)
        await bookingpage.commodity(data.commodity)
        await bookingpage.hsn_code(data.hsn_c)
        await page.keyboard.press('Enter')
        await bookingpage.show_quotes()

        await page.waitForTimeout(500)
        await bookingpage.currency_selector(data.cur_thb)
        await bookingpage.currency_selector(data.cur_ind)
        await bookingpage.currency_selector(data.cur_usd)
        await bookingpage.addservices_button()
        await bookingpage.add_serv_type(data.type_sez)
        await bookingpage.addservices_customs()
        await bookingpage.addservices_drop()
        await bookingpage.drop_sezpincode(data.sez_pincode)
        await bookingpage.drop_sezplace(data.sez_place)
        await bookingpage.savechanges()

        await bookingpage.quote_down()
        await bookingpage.Frequency()
        await bookingpage.Routing()
        await bookingpage.Booking_Cutoff()
        await bookingpage.Cargo_Handover_Cutoff()
        await bookingpage.ETD()
        await bookingpage.ETA()
        await bookingpage.Origin()
        await bookingpage.Pick()
        await bookingpage.handling()
        await bookingpage.origincustoms()
        await bookingpage.terminal()
        await bookingpage.x_ray()
        await bookingpage.Freight()
        await bookingpage.fsc()
        await bookingpage.ssc()
        await bookingpage.freight()
        await bookingpage.Destination()
        await bookingpage.do()
        await bookingpage.sez_customs()
        await bookingpage.sez_drop()

        await bookingpage.quote_submit()

        await bookingpage.add_fn(data.fn)
        await bookingpage.add_ln(data.ln)
        await bookingpage.add_mail(data.shimail)
        await bookingpage.add_ph_code(data.phone_co)
        await page.keyboard.press('Enter')
        await bookingpage.add_number(data.phone_no)

        await bookingpage.shi_companyName(data.shicom)
        await bookingpage.shi_buildingName(data.shibui)
        await bookingpage.shi_doorNo(data.shidoor)
        await bookingpage.shi_streetName(data.shist)
        await bookingpage.shi_area(data.shiarea)
        await bookingpage.shi_country_exw()
        await bookingpage.shi_state_exw()
        await bookingpage.shi_district_exw()
        await bookingpage.shi_addresszipcode_exw()
        await bookingpage.shi_city_exw()
        await bookingpage.shi_nxt()

        await bookingpage.del_gst(data.delgst)
        await bookingpage.del_gst_file(data.delgstfile)
        await bookingpage.del_company()
        await bookingpage.del_branch(data.delbranch)
        await bookingpage.del_buildingname(data.delbuilding)
        await bookingpage.del_doorno(data.deldoor)
        await bookingpage.del_streetname(data.delstreet)
        await bookingpage.del_areaname(data.delarea)
        await bookingpage.del_country_all()
        await bookingpage.del_state_exw()
        await bookingpage.del_district_exw()
        await bookingpage.del_pincode_exw()
        await bookingpage.del_city_exw()
        await bookingpage.shi_nxt()


        await bookingpage.confirm_booking()
        await bookingpage.proceed()
        await bookingpage.gstuploadtoast()
        await bookingpage.bookconfirmtoast()

        await mybookingpage.mybook_airtitle()     
        await mybookingpage.port_select(data.ori_th)
        await mybookingpage.thailand_1()
        await mybookingpage.chennai_1()
        await mybookingpage.cmp()
        await mybookingpage.activeclck()
        await mybookingpage.mile_1()
        await mybookingpage.mile_2()
        await mybookingpage.mile_3()
        await mybookingpage.mile_4()
        await mybookingpage.mile_5()
        await mybookingpage.mile_6()
        await mybookingpage.mile_7()
        await mybookingpage.mile_8()
        await mybookingpage.mile_9()
        await mybookingpage.mile_10()
        await mybookingpage.mile_11()
        await mybookingpage.mile_12()
        

    })
     test("Assert the existing data in my bookings and check milestone for fob without drop (France)",async({baseURL,loginpage,page,bookingpage,mybookingpage})=>{
        await page.goto(`${baseURL}book`)
        await loginpage.username(data.uname)
        await loginpage.password(data.passw)
        await loginpage.loginbtn()
        await loginpage.toast()
        await bookingpage.newbook()
        await bookingpage.air()
        await bookingpage.origin(data.ori_fra)
        await bookingpage.destination(data.dest)
        await bookingpage.date(currentdate)
        await bookingpage.incoterm_fob()
        await bookingpage.nxt()

        await page.waitForTimeout(500)
        await bookingpage.type(data.type)
        await bookingpage.metric(data.met)
        await bookingpage.len(data.len)
        await bookingpage.wid(data.wid)
        await bookingpage.height(data.hei)
        await bookingpage.no_of_pack(data.no_of)
        await bookingpage.weight_per(data.weight_per)
        await bookingpage.commodity(data.commodity)
        await bookingpage.hsn_code(data.hsn_c)
        await page.keyboard.press('Enter')
        await bookingpage.show_quotes()

        await page.waitForTimeout(1000)

        await bookingpage.quote_down()
        await bookingpage.Frequency()
        await bookingpage.Routing()
        await bookingpage.Booking_Cutoff()
        await bookingpage.Cargo_Handover_Cutoff()
        await bookingpage.ETD()
        await bookingpage.ETA()
        await bookingpage.Freight()
        await bookingpage.fsc()
        await bookingpage.ssc()
        await bookingpage.freight()
        await bookingpage.Destination()
        await bookingpage.do()
        await bookingpage.quote_submit()

        await bookingpage.add_fn(data.fn)
        await bookingpage.add_ln(data.ln)
        await bookingpage.add_mail(data.shimail)
        await bookingpage.add_ph_code(data.phone_co)
        await page.keyboard.press('Enter')
        await bookingpage.add_number(data.phone_no)
        await bookingpage.shi_companyName(data.shicom)
        await bookingpage.shi_buildingName(data.shibui)
        await bookingpage.shi_doorNo(data.shidoor)
        await bookingpage.shi_streetName(data.shist)
        await bookingpage.shi_area(data.shiarea)
        await page.pause()
        await bookingpage.shi_country_exw()
        await bookingpage.shi_state(data.fra_sta)
        await bookingpage.shi_district(data.fra_dist)
        await bookingpage.shi_zipcode(data.fra_zip_ad)
        await bookingpage.shi_city(data.fra_city_ad)
        await bookingpage.shi_nxt()

        await bookingpage.bill_gst(data.billgst)
        await bookingpage.bill_gst_file(data.billgstfile)
        await bookingpage.bill_company()
        await bookingpage.bill_branch(data.billbranch)
        await bookingpage.bill_buildingname(data.billbuilding)
        await bookingpage.bill_doorno(data.billdoor)
        await bookingpage.bill_streetname(data.billstreet)
        await bookingpage.bill_areaname(data.billarea)
        await bookingpage.bill_country_all()
        await bookingpage.bill_state(data.billstate)
        await page.keyboard.press('Enter')
        await bookingpage.bill_district(data.billdistrict)
        await page.keyboard.press('Enter')
        await bookingpage.bill_pincode(data.billpincode)
        await page.keyboard.press('Enter')
        await bookingpage.bill_city(data.billcity)
        await page.keyboard.press('Enter')
        await bookingpage.shi_nxt()

        await bookingpage.confirm_booking()
        await bookingpage.proceed()

        await mybookingpage.mybook_airtitle()
        await mybookingpage.port_select(data.ori_fra)     
        await mybookingpage.france_1()
        await mybookingpage.chennai_1()
        await mybookingpage.cmp()
        await mybookingpage.activeclck()
        await mybookingpage.mile_1()
        await mybookingpage.mile_2()
        await mybookingpage.mile_3()
        await mybookingpage.mile_4()
        await mybookingpage.mile_5()
        await mybookingpage.mile_nopick()
        await mybookingpage.mile_7()
        await mybookingpage.mile_8()
        await mybookingpage.mile_9()
        await mybookingpage.mile_10()
        await mybookingpage.mile_11()
        await mybookingpage.mile_nodrop()
        

   
    })
    test("Assert the existing data in my bookings and check milestone for fob with drop (hongkong)",async({baseURL,loginpage,page,bookingpage,mybookingpage})=>{
        await page.goto(`${baseURL}book`)//validation msg need to check by typing non-accepting characters like spl and numbers
        await loginpage.username(data.uname_1)
        await loginpage.password(data.passw_1)
        await loginpage.loginbtn()
        await loginpage.toast()

        await bookingpage.newbook()
        await bookingpage.air()
        await bookingpage.origin(data.ori_hk)
        await bookingpage.destination(data.dest)
        await bookingpage.date(currentdate)
        await bookingpage.incoterm_fob()
        await bookingpage.nxt()

        await page.waitForTimeout(500)
        await bookingpage.type(data.type)
        await bookingpage.metric(data.met)
        await bookingpage.len(data.len)
        await bookingpage.wid(data.wid)
        await bookingpage.height(data.hei)
        await bookingpage.no_of_pack(data.no_of)
        await bookingpage.weight_per(data.weight_per)
        await bookingpage.commodity(data.commodity)
        await bookingpage.hsn_code(data.hsn_c)
        await page.keyboard.press('Enter')
        await bookingpage.show_quotes()

        await page.waitForTimeout(500)
        await bookingpage.currency_selector(data.cur_sin)
        await bookingpage.currency_selector(data.cur_ind)
        await bookingpage.currency_selector(data.cur_usd)
        await bookingpage.addservices_button()
        await bookingpage.add_serv_type(data.type_sez)
        await bookingpage.addservices_customs()
        await bookingpage.addservices_drop()
        await bookingpage.drop_sezpincode(data.sez_pincode)
        await bookingpage.drop_sezplace(data.sez_place)
        await bookingpage.savechanges()

        await bookingpage.quote_down()
        await bookingpage.Frequency()
        await bookingpage.Routing()
        await bookingpage.Booking_Cutoff()
        await bookingpage.Cargo_Handover_Cutoff()
        await bookingpage.ETD()
        await bookingpage.ETA()
        await bookingpage.Freight()
        await bookingpage.fsc()
        await bookingpage.ssc()
        await bookingpage.freight()
        await bookingpage.Destination()
        await bookingpage.do()
        await bookingpage.sez_customs()
        await bookingpage.sez_drop()

        await bookingpage.quote_submit()

        await bookingpage.add_fn(data.fn)
        await bookingpage.add_ln(data.ln)
        await bookingpage.add_mail(data.shimail)
        await bookingpage.add_ph_code(data.phone_co)
        await page.keyboard.press('Enter')
        await bookingpage.add_number(data.phone_no)

        await bookingpage.shi_companyName(data.shicom)
        await bookingpage.shi_buildingName(data.shibui)
        await bookingpage.shi_doorNo(data.shidoor)
        await bookingpage.shi_streetName(data.shist)
        await bookingpage.shi_area(data.shiarea)
        await bookingpage.shi_country_exw()
        await bookingpage.shi_district(data.hk_dist)
        await bookingpage.shi_city(data.hk_city_ad)
        await bookingpage.shi_nxt()

  
        await bookingpage.del_gst(data.delgst)
        await bookingpage.del_gst_file(data.delgstfile)
        await bookingpage.del_company()
        await bookingpage.del_branch(data.delbranch)
        await bookingpage.del_buildingname(data.delbuilding)
        await bookingpage.del_doorno(data.deldoor)
        await bookingpage.del_streetname(data.delstreet)
        await bookingpage.del_areaname(data.delarea)
        await bookingpage.del_country_all()
        await bookingpage.del_state_exw()
        await bookingpage.del_district_exw()
        await bookingpage.del_pincode_exw()
        await bookingpage.del_city_exw()
        await bookingpage.shi_nxt()


        await bookingpage.confirm_booking()
        await bookingpage.proceed()
        await bookingpage.gstuploadtoast()
        await bookingpage.bookconfirmtoast()

        await mybookingpage.mybook_airtitle()     
        await mybookingpage.port_select(data.ori_hk)
        await mybookingpage.hongkong_1()
        await mybookingpage.chennai_1()
        await mybookingpage.cmp()
        await mybookingpage.activeclck()
        await mybookingpage.mile_1()
        await mybookingpage.mile_2()
        await mybookingpage.mile_3()
        await mybookingpage.mile_4()
        await mybookingpage.mile_5()
        await mybookingpage.mile_nopick()
        await mybookingpage.mile_7()
        await mybookingpage.mile_8()
        await mybookingpage.mile_9()
        await mybookingpage.mile_10()
        await mybookingpage.mile_11()
        await mybookingpage.mile_12()
        

    })
     test("Assert the existing data in my bookings and check milestone for fca without drop (Germany)",async({baseURL,loginpage,page,bookingpage,mybookingpage})=>{
        await page.goto(`${baseURL}book`)
        await loginpage.username(data.uname)
        await loginpage.password(data.passw)
        await loginpage.loginbtn()
        await loginpage.toast()
        await bookingpage.newbook()
        await bookingpage.air()
        await bookingpage.origin(data.ori_ger)
        await bookingpage.destination(data.dest)
        await bookingpage.date(currentdate)
        await bookingpage.incoterm_fca()
        await bookingpage.nxt()

        await page.waitForTimeout(500)
        await bookingpage.type(data.type)
        await bookingpage.metric(data.met)
        await bookingpage.len(data.len)
        await bookingpage.wid(data.wid)
        await bookingpage.height(data.hei)
        await bookingpage.no_of_pack(data.no_of)
        await bookingpage.weight_per(data.weight_per)
        await bookingpage.commodity(data.commodity)
        await bookingpage.hsn_code(data.hsn_c)
        await page.keyboard.press('Enter')
        await bookingpage.show_quotes()

        await page.waitForTimeout(1000)

        await bookingpage.quote_down()
        await bookingpage.Frequency()
        await bookingpage.Routing()
        await bookingpage.Booking_Cutoff()
        await bookingpage.Cargo_Handover_Cutoff()
        await bookingpage.ETD()
        await bookingpage.ETA()
        await bookingpage.Origin()
        await bookingpage.handling()
        await bookingpage.origincustoms()
        await bookingpage.terminal()
        await bookingpage.x_ray()
        await bookingpage.Freight()
        await bookingpage.fsc()
        await bookingpage.ssc()
        await bookingpage.freight()
        await bookingpage.Destination()
        await bookingpage.do()
        await bookingpage.quote_submit()

        await bookingpage.add_fn(data.fn)
        await bookingpage.add_ln(data.ln)
        await bookingpage.add_mail(data.shimail)
        await bookingpage.add_ph_code(data.phone_co)
        await page.keyboard.press('Enter')
        await bookingpage.add_number(data.phone_no)
        await bookingpage.shi_companyName(data.shicom)
        await bookingpage.shi_buildingName(data.shibui)
        await bookingpage.shi_doorNo(data.shidoor)
        await bookingpage.shi_streetName(data.shist)
        await bookingpage.shi_area(data.shiarea)
        await bookingpage.shi_country_exw()
        await bookingpage.shi_state(data.ger_sta)
        await bookingpage.shi_district(data.ger_dist)
        await bookingpage.shi_zipcode(data.ger_zip_ad)
        await bookingpage.shi_city(data.ger_city_ad)
        await bookingpage.shi_nxt()

        await bookingpage.bill_gst(data.billgst)
        await bookingpage.bill_gst_file(data.billgstfile)
        await bookingpage.bill_company()
        await bookingpage.bill_branch(data.billbranch)
        await bookingpage.bill_buildingname(data.billbuilding)
        await bookingpage.bill_doorno(data.billdoor)
        await bookingpage.bill_streetname(data.billstreet)
        await bookingpage.bill_areaname(data.billarea)
        await bookingpage.bill_country_all()
        await bookingpage.bill_state(data.billstate)
        await page.keyboard.press('Enter')
        await bookingpage.bill_district(data.billdistrict)
        await page.keyboard.press('Enter')
        await bookingpage.bill_pincode(data.billpincode)
        await page.keyboard.press('Enter')
        await bookingpage.bill_city(data.billcity)
        await page.keyboard.press('Enter')
        await bookingpage.shi_nxt()

        await bookingpage.confirm_booking()
        await bookingpage.proceed()

        await mybookingpage.mybook_airtitle() 
        await mybookingpage.port_select(data.ori_ger)
        await mybookingpage.germany_1()
        await mybookingpage.chennai_1()
        await mybookingpage.cmp()
        await mybookingpage.activeclck()
        await mybookingpage.mile_1()
        await mybookingpage.mile_2()
        await mybookingpage.mile_3()
        await mybookingpage.mile_4()
        await mybookingpage.mile_5()
        await mybookingpage.mile_nopick()
        await mybookingpage.mile_7()
        await mybookingpage.mile_8()
        await mybookingpage.mile_9()
        await mybookingpage.mile_10()
        await mybookingpage.mile_11()
        await mybookingpage.mile_nodrop()

    })
    test("Assert the existing data in my bookings and check milestone for fca with drop (dubai)",async({baseURL,loginpage,page,bookingpage,mybookingpage})=>{
        await page.goto(`${baseURL}book`)//validation msg need to check by typing non-accepting characters like spl and numbers
        await loginpage.username(data.uname_1)
        await loginpage.password(data.passw_1)
        await loginpage.loginbtn()
        await loginpage.toast()

        await bookingpage.newbook()
        await bookingpage.air()
        await bookingpage.origin(data.ori_dxb)
        await bookingpage.destination(data.dest)
        await bookingpage.date(currentdate)
        await bookingpage.incoterm_fob()
        await bookingpage.nxt()

        await page.waitForTimeout(500)
        await bookingpage.type(data.type)
        await bookingpage.metric(data.met)
        await bookingpage.len(data.len)
        await bookingpage.wid(data.wid)
        await bookingpage.height(data.hei)
        await bookingpage.no_of_pack(data.no_of)
        await bookingpage.weight_per(data.weight_per)
        await bookingpage.commodity(data.commodity)
        await bookingpage.hsn_code(data.hsn_c)
        await page.keyboard.press('Enter')
        await bookingpage.show_quotes()

        await page.waitForTimeout(500)
        await bookingpage.currency_selector(data.cur_sin)
        await bookingpage.currency_selector(data.cur_ind)
        await bookingpage.currency_selector(data.cur_usd)
        await bookingpage.addservices_button()
        await bookingpage.add_serv_type(data.type_sez)
        await bookingpage.addservices_customs()
        await bookingpage.addservices_drop()
        await bookingpage.drop_sezpincode(data.sez_pincode)
        await bookingpage.drop_sezplace(data.sez_place)
        await bookingpage.savechanges()

        await bookingpage.quote_down()
        await bookingpage.Frequency()
        await bookingpage.Routing()
        await bookingpage.Booking_Cutoff()
        await bookingpage.Cargo_Handover_Cutoff()
        await bookingpage.ETD()
        await bookingpage.ETA()
        await bookingpage.Origin()
        await bookingpage.handling()
        await bookingpage.origincustoms()
        await bookingpage.terminal()
        await bookingpage.x_ray()
        await bookingpage.Freight()
        await bookingpage.fsc()
        await bookingpage.ssc()
        await bookingpage.freight()
        await bookingpage.Destination()
        await bookingpage.do()
        await bookingpage.sez_customs()
        await bookingpage.sez_drop()

        await bookingpage.quote_submit()

        await bookingpage.add_fn(data.fn)
        await bookingpage.add_ln(data.ln)
        await bookingpage.add_mail(data.shimail)
        await bookingpage.add_ph_code(data.phone_co)
        await page.keyboard.press('Enter')
        await bookingpage.add_number(data.phone_no)

        await bookingpage.shi_companyName(data.shicom)
        await bookingpage.shi_buildingName(data.shibui)
        await bookingpage.shi_doorNo(data.shidoor)
        await bookingpage.shi_streetName(data.shist)
        await bookingpage.shi_area(data.shiarea)
        await bookingpage.shi_country_exw()
        await bookingpage.shi_district(data.dxb_dist)
        await bookingpage.shi_zipcode(data.dxb_zip_ad)
        await bookingpage.shi_city(data.dxb_city_ad)
        await bookingpage.shi_nxt()

        await bookingpage.del_gst(data.delgst)
        await bookingpage.del_gst_file(data.delgstfile)
        await bookingpage.del_company()
        await bookingpage.del_branch(data.delbranch)
        await bookingpage.del_buildingname(data.delbuilding)
        await bookingpage.del_doorno(data.deldoor)
        await bookingpage.del_streetname(data.delstreet)
        await bookingpage.del_areaname(data.delarea)
        await bookingpage.del_country_all()
        await bookingpage.del_state_exw()
        await bookingpage.del_district_exw()
        await bookingpage.del_pincode_exw()
        await bookingpage.del_city_exw()
        await bookingpage.shi_nxt()


        await bookingpage.confirm_booking()
        await bookingpage.proceed()
        await bookingpage.gstuploadtoast()
        await bookingpage.bookconfirmtoast()

        await mybookingpage.mybook_airtitle()     
        await mybookingpage.port_select(data.ori_dxb)
        await mybookingpage.dubai_1()
        await mybookingpage.chennai_1()
        await mybookingpage.cmp()
        await mybookingpage.activeclck()
        await mybookingpage.mile_1()
        await mybookingpage.mile_2()
        await mybookingpage.mile_3()
        await mybookingpage.mile_4()
        await mybookingpage.mile_5()
        await mybookingpage.mile_nopick()
        await mybookingpage.mile_7()
        await mybookingpage.mile_8()
        await mybookingpage.mile_9()
        await mybookingpage.mile_10()
        await mybookingpage.mile_11()
        await mybookingpage.mile_12()
        

    })
})

// test.only("Air Booking on Dokonaly For Chek Lap Kok:", async ({ baseURL, page, loginpage, bookingpage }) => {
//     await page.goto(`${baseURL}login/`)
//     await loginpage.username(data.uname_1)
//     await loginpage.password(data.passw_1)
//     await loginpage.loginbtn()
//     await loginpage.toast()

//     await page.waitForTimeout(2000)
//     await bookingpage.newbook()
//     await bookingpage.air()
//     await page.waitForTimeout(500)
//     await bookingpage.origin(data.ori_hk)
//     await bookingpage.destination(data.dest)
//     await bookingpage.date(currentdate)
//     await bookingpage.incoterm_exw()
//     await bookingpage.place(data.hk_place)
//     await page.waitForTimeout(1000)
//     await bookingpage.nxt()

//     await page.waitForTimeout(2000)
//     await bookingpage.type(data.type_cra)
//     await bookingpage.metric(data.met)
//     await bookingpage.len(data.len)
//     await bookingpage.wid(data.wid)
//     await bookingpage.height(data.hei)
//     await bookingpage.no_of_pack(data.no_of)
//     await bookingpage.weight_per(data.weight_per)
//     await bookingpage.commodity(data.commodity)
//     await bookingpage.hsn_code(data.hsn_c)
//     await page.keyboard.press('Enter')
//     await page.waitForTimeout(1000)
//     await bookingpage.show_quotes()

//     await page.waitForTimeout(1000)

//     await bookingpage.currency_selector(data.cur_hkd)
//     await bookingpage.currency_selector(data.cur_usd)
//     await bookingpage.currency_selector(data.cur_ind)
//     await bookingpage.addservices_button()
//     await bookingpage.add_serv_type(data.type_sez)
//     await bookingpage.addservices_customs()
//     await bookingpage.addservices_drop()
//     await bookingpage.drop_sezpincode(data.sez_pincode)
//     await bookingpage.drop_sezplace(data.sez_place)
//     await bookingpage.insurance()
//     await bookingpage.insurance_cur(data.cur_ind)
//     await bookingpage.insurance_value(data.cargo_val)
//     await bookingpage.carbonOffset()
//     await page.waitForTimeout(1000)
//     await bookingpage.savechanges()
//     await bookingpage.addservicetoast()

//     await bookingpage.quote_down()
//     await bookingpage.Frequency()
//     await bookingpage.Routing()
//     await bookingpage.Booking_Cutoff()
//     await bookingpage.Cargo_Handover_Cutoff()
//     await bookingpage.ETD()
//     await bookingpage.ETA()
//     await bookingpage.Origin()
//     await bookingpage.Pick()
//     await bookingpage.handling()
//     await bookingpage.origincustoms()
//     await bookingpage.terminal()
//     await bookingpage.x_ray()
//     await bookingpage.Freight()
//     await bookingpage.fsc()
//     await bookingpage.ssc()
//     await bookingpage.freight()
//     await bookingpage.Destination()
//     await bookingpage.do()
//     await bookingpage.sez_customs()
//     await bookingpage.sez_drop()
//     await bookingpage.Co()
//     await bookingpage.Insurance()
//     await page.waitForTimeout(1000)

//     await bookingpage.quote_submit()

//     await page.waitForTimeout(1000)
//     await bookingpage.add_fn(data.fn)
//     await bookingpage.add_ln(data.ln)
//     await bookingpage.add_mail(data.shimail)
//     await bookingpage.add_ph_code(data.phone_co)
//     await page.keyboard.press('Enter')
//     await bookingpage.add_number(data.phone_no)
//     await bookingpage.shi_companyName(data.shicom)
//     await bookingpage.shi_buildingName(data.shibui)
//     await bookingpage.shi_doorNo(data.shidoor)
//     await bookingpage.shi_streetName(data.shist)
//     await bookingpage.shi_area(data.shiarea)
//     await bookingpage.shi_country_exw()
//     await bookingpage.shi_district_exw()
//     await bookingpage.shi_city_exw()
//     await page.waitForTimeout(1000)
//     await bookingpage.shi_nxt()

//     await page.pause()
//     await bookingpage.del_gst(data.delgst)
//     await bookingpage.del_gst_file(data.delgstfile)
//     await bookingpage.del_company()
//     await bookingpage.del_branch(data.delbranch)
//     await bookingpage.del_buildingname(data.delbuilding)
//     await bookingpage.del_doorno(data.deldoor)
//     await bookingpage.del_streetname(data.delstreet)
//     await bookingpage.del_areaname(data.delarea)
//     await bookingpage.del_country_all()
//     await bookingpage.del_district_exw()
//     await bookingpage.del_pincode_exw()
//     await bookingpage.del_city_exw()

//     await bookingpage.shi_nxt()


//     await bookingpage.confirm_booking()
//     await bookingpage.proceed()
//     await bookingpage.gstuploadtoast()
//     await bookingpage.bookconfirmtoast()       



// })


